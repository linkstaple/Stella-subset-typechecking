// TypeScript File generated by the BNF Converter (bnfc 2.9.6).

import {integerToken, stellaIdentToken, extensionNameToken, memoryAddressToken, program, languageDecl, extension, decl, localDecl, annotation, paramDecl, returnType, throwType, matchCase, optionalTyping, patternData, exprData, pattern, labelledPattern, binding, expr, patternBinding, type_, variantFieldType, recordFieldType, typing, AProgram, LanguageCore, AnExtension, DeclFun, DeclFunGeneric, DeclTypeAlias, DeclExceptionType, DeclExceptionVariant, ALocalDecl, InlineAnnotation, AParamDecl, NoReturnType, SomeReturnType, NoThrowType, SomeThrowType, TypeAuto, TypeFun, TypeForAll, TypeRec, TypeSum, TypeTuple, TypeRecord, TypeVariant, TypeList, TypeBool, TypeNat, TypeUnit, TypeTop, TypeBottom, TypeRef, TypeVar, AMatchCase, NoTyping, SomeTyping, NoPatternData, SomePatternData, NoExprData, SomeExprData, PatternCastAs, PatternAsc, PatternVariant, PatternInl, PatternInr, PatternTuple, PatternRecord, PatternList, PatternCons, PatternFalse, PatternTrue, PatternUnit, PatternInt, PatternSucc, PatternVar, ALabelledPattern, ABinding, Sequence, Assign, If, Let, LetRec, TypeAbstraction, LessThan, LessThanOrEqual, GreaterThan, GreaterThanOrEqual, Equal, NotEqual, TypeAsc, TypeCast, Abstraction, Variant, Match, List, Add, Subtract, LogicOr, Multiply, Divide, LogicAnd, Ref, Deref, Application, TypeApplication, DotRecord, DotTuple, Tuple, Record, ConsList, Head, IsEmpty, Tail, Panic, Throw, TryCatch, TryWith, TryCastAs, Inl, Inr, Succ, LogicNot, Pred, IsZero, Fix, NatRec, Fold, Unfold, ConstTrue, ConstFalse, ConstUnit, ConstInt, ConstMemory, Var, APatternBinding, AVariantFieldType, ARecordFieldType, ATyping} from './abstract'
class Token {}
class TextToken extends Token {
  constructor(public text: string) {
    super()
  }
  toString() {
    return this.text
  }
}
class SpaceToken extends TextToken {
  constructor() {
    super(' ')
  }
  toString() {
    return ' '
  }
}
class NewLineToken extends Token {
  indentShift = 0
  constructor() {
    super()
  }
  nest() {
    this.indentShift = 1
  }
  unnest() {
    this.indentShift = -1
  }
  toString() {
    return '\n'
  }
}
class StringRenderer {
  private indentSize = 2
  print(tokens: string[]): string {
    return this.render(tokens)
    .reduce(this.split.bind(this), [])
    .map(this.addIndentation.bind(this))
    .map(tokens => tokens.map(token => token.toString()).join(''))
    .join('\n')
  }
  render(tokens: string[]): Token[] {
    const tokensList = tokens.reduce<Token[]>((tokensList, token) => {
      if (['', ' '].includes(token)) {
        return tokensList
      }
      if (token === '{') {
        const newLine = new NewLineToken()
        newLine.nest()
        tokensList.push(new TextToken(token), newLine)
      } else if (token === '}') {
        this.dropTrailingNewLines(tokensList)
        const newLine = new NewLineToken()
        newLine.unnest()
        tokensList.push(newLine, new TextToken(token), new NewLineToken())
      } else if (['!', '@', '&', '<', '[', '$', '#'].includes(token)) {
        tokensList.push(new TextToken(token))
      } else if (token === '(') {
        this.dropTrailingSpaces(tokensList)
        tokensList.push(new TextToken(token))
      } else if ([')', ']', '>', ','].includes(token)) {
        this.dropTrailingSpaces(tokensList)
        this.dropTrailingNewLines(tokensList)
        tokensList.push(new TextToken(token), new SpaceToken())
      } else if (token === '.') {
        this.dropTrailingSpaces(tokensList)
        this.dropTrailingNewLines(tokensList)
        tokensList.push(new TextToken(token))
      } else if (token === ';') {
        this.dropTrailingSpaces(tokensList)
        this.dropTrailingNewLines(tokensList)
        tokensList.push(new TextToken(token), new NewLineToken())
      } else {
        tokensList.push(new TextToken(token), new SpaceToken())
      }
      return tokensList
    }, [])
    this.dropTrailingSpaces(tokensList)
    this.dropTrailingNewLines(tokensList)
    return tokensList
  }
  split(splitData: Array<[number, Token[]]>, token: Token): Array<[number, Token[]]> {
    if (token instanceof NewLineToken) {
      const indentationLevel = splitData[splitData.length - 1]?.[0] ?? 0
      splitData.push([indentationLevel + token.indentShift, []])
    } else if (splitData.length == 0) {
      splitData.push([0, [token]])
    } else {
      splitData[splitData.length - 1][1].push(token)
    }
    return splitData
  }
  addIndentation([indentationLevel, tokens]: [number, Token[]]): Token[] {
    if (indentationLevel === 0) {
      return tokens
    }
    tokens.unshift(new TextToken(' '.repeat(this.indentSize * indentationLevel)))
    return tokens
  }
  private dropTrailingSpaces(list: Token[]) {
    while (list.length > 0 && list[list.length - 1] instanceof SpaceToken) {
      list.pop()
    }
  }
  private dropTrailingNewLines(list: Token[]) {
    while (list.length > 0 && list[list.length - 1] instanceof NewLineToken) {
      list.pop()
    }
  }
}

const renderer = new StringRenderer()
export function printToken(token: integerToken | stellaIdentToken | extensionNameToken | memoryAddressToken): string {
  return String(token.value)
}
export function printInteger(token: integerToken): string {
  return String(token.value)
}
export function printStellaIdent(token: stellaIdentToken): string {
  return String(token.value)
}
export function printExtensionName(token: extensionNameToken): string {
  return String(token.value)
}
export function printMemoryAddress(token: memoryAddressToken): string {
  return String(token.value)
}
export function printProgram(node: program): string {
  return renderer.print(prettifyProgram(node))
}

export function printListOfStellaIdent(list: Array<stellaIdentToken>): string {
  return renderer.print(prettifyListOfStellaIdent(list))
}

export function printLanguageDecl(node: languageDecl): string {
  return renderer.print(prettifyLanguageDecl(node))
}

export function printExtension(node: extension): string {
  return renderer.print(prettifyExtension(node))
}

export function printListOfExtensionName(list: Array<extensionNameToken>): string {
  return renderer.print(prettifyListOfExtensionName(list))
}

export function printListOfExtension(list: Array<extension>): string {
  return renderer.print(prettifyListOfExtension(list))
}

export function printDecl(node: decl): string {
  return renderer.print(prettifyDecl(node))
}

export function printListOfDecl(list: Array<decl>): string {
  return renderer.print(prettifyListOfDecl(list))
}

export function printLocalDecl(node: localDecl): string {
  return renderer.print(prettifyLocalDecl(node))
}

export function printListOfLocalDecl(list: Array<localDecl>): string {
  return renderer.print(prettifyListOfLocalDecl(list))
}

export function printAnnotation(node: annotation): string {
  return renderer.print(prettifyAnnotation(node))
}

export function printListOfAnnotation(list: Array<annotation>): string {
  return renderer.print(prettifyListOfAnnotation(list))
}

export function printParamDecl(node: paramDecl): string {
  return renderer.print(prettifyParamDecl(node))
}

export function printListOfParamDecl(list: Array<paramDecl>): string {
  return renderer.print(prettifyListOfParamDecl(list))
}

export function printReturnType(node: returnType): string {
  return renderer.print(prettifyReturnType(node))
}

export function printThrowType(node: throwType): string {
  return renderer.print(prettifyThrowType(node))
}

export function printListOfType9(list: Array<type_>): string {
  return renderer.print(prettifyListOfType9(list))
}

export function printMatchCase(node: matchCase): string {
  return renderer.print(prettifyMatchCase(node))
}

export function printListOfMatchCase(list: Array<matchCase>): string {
  return renderer.print(prettifyListOfMatchCase(list))
}

export function printOptionalTyping(node: optionalTyping): string {
  return renderer.print(prettifyOptionalTyping(node))
}

export function printPatternData(node: patternData): string {
  return renderer.print(prettifyPatternData(node))
}

export function printExprData(node: exprData): string {
  return renderer.print(prettifyExprData(node))
}

export function printPattern(node: pattern): string {
  return renderer.print(prettifyPattern(node))
}

export function printListOfPattern(list: Array<pattern>): string {
  return renderer.print(prettifyListOfPattern(list))
}

export function printLabelledPattern(node: labelledPattern): string {
  return renderer.print(prettifyLabelledPattern(node))
}

export function printListOfLabelledPattern(list: Array<labelledPattern>): string {
  return renderer.print(prettifyListOfLabelledPattern(list))
}

export function printBinding(node: binding): string {
  return renderer.print(prettifyBinding(node))
}

export function printListOfBinding(list: Array<binding>): string {
  return renderer.print(prettifyListOfBinding(list))
}

export function printExpr(node: expr): string {
  return renderer.print(prettifyExpr(node))
}

export function printListOfExpr(list: Array<expr>): string {
  return renderer.print(prettifyListOfExpr(list))
}

export function printPatternBinding(node: patternBinding): string {
  return renderer.print(prettifyPatternBinding(node))
}

export function printListOfPatternBinding(list: Array<patternBinding>): string {
  return renderer.print(prettifyListOfPatternBinding(list))
}

export function printListOfExpr2(list: Array<expr>): string {
  return renderer.print(prettifyListOfExpr2(list))
}

export function printType(node: type_): string {
  return renderer.print(prettifyType(node))
}

export function printListOfType(list: Array<type_>): string {
  return renderer.print(prettifyListOfType(list))
}

export function printVariantFieldType(node: variantFieldType): string {
  return renderer.print(prettifyVariantFieldType(node))
}

export function printListOfVariantFieldType(list: Array<variantFieldType>): string {
  return renderer.print(prettifyListOfVariantFieldType(list))
}

export function printRecordFieldType(node: recordFieldType): string {
  return renderer.print(prettifyRecordFieldType(node))
}

export function printListOfRecordFieldType(list: Array<recordFieldType>): string {
  return renderer.print(prettifyListOfRecordFieldType(list))
}

export function printTyping(node: typing): string {
  return renderer.print(prettifyTyping(node))
}
function prettifyProgram(node: program): string[] {
  if (node.type === 'AProgram') {
    return prettifyAProgram(node)
  }
  throw new Error(`[prettifyProgram]: Unkown node`)
}

function prettifyAProgram(node: AProgram): string[] {
  return [...prettifyLanguageDecl(node.languagedecl), ...prettifyListOfExtension(node.listextension), ...prettifyListOfDecl(node.listdecl)]
}

function prettifyListOfStellaIdent(list: Array<stellaIdentToken>): string[] {
  return list.length === 0
    ? []
    : list.map(item => [printStellaIdent(item), ',']).flat().slice(0, -1)
}

function prettifyLanguageDecl(node: languageDecl): string[] {
  if (node.type === 'LanguageCore') {
    return prettifyLanguageCore(node)
  }
  throw new Error(`[prettifyLanguageDecl]: Unkown node`)
}

function prettifyLanguageCore(node: LanguageCore): string[] {
  return ['language', 'core', ';']
}

function prettifyExtension(node: extension): string[] {
  if (node.type === 'AnExtension') {
    return prettifyAnExtension(node)
  }
  throw new Error(`[prettifyExtension]: Unkown node`)
}

function prettifyAnExtension(node: AnExtension): string[] {
  return ['extend', 'with', ...prettifyListOfExtensionName(node.listextensionname)]
}

function prettifyListOfExtensionName(list: Array<extensionNameToken>): string[] {
  return list.length === 0
    ? []
    : list.map(item => [printExtensionName(item), ',']).flat().slice(0, -1)
}

function prettifyListOfExtension(list: Array<extension>): string[] {
  return list.length === 0
    ? []
    : list.map(item => [...prettifyExtension(item), ';']).flat()
}

function prettifyDecl(node: decl): string[] {
  if (node.type === 'DeclFun') {
    return prettifyDeclFun(node)
  }
  if (node.type === 'DeclFunGeneric') {
    return prettifyDeclFunGeneric(node)
  }
  if (node.type === 'DeclTypeAlias') {
    return prettifyDeclTypeAlias(node)
  }
  if (node.type === 'DeclExceptionType') {
    return prettifyDeclExceptionType(node)
  }
  if (node.type === 'DeclExceptionVariant') {
    return prettifyDeclExceptionVariant(node)
  }
  throw new Error(`[prettifyDecl]: Unkown node`)
}

function prettifyDeclFun(node: DeclFun): string[] {
  return [...prettifyListOfAnnotation(node.listannotation), 'fn', printStellaIdent(node.stellaident), '(', ...prettifyListOfParamDecl(node.listparamdecl), ')', ...prettifyReturnType(node.returntype), ...prettifyThrowType(node.throwtype), '{', ...prettifyListOfDecl(node.listdecl), 'return', ...prettifyExpr(node.expr), '}']
}
function prettifyDeclFunGeneric(node: DeclFunGeneric): string[] {
  return [...prettifyListOfAnnotation(node.listannotation), 'generic', 'fn', printStellaIdent(node.stellaident), '[', ...prettifyListOfStellaIdent(node.liststellaident), ']', '(', ...prettifyListOfParamDecl(node.listparamdecl), ')', ...prettifyReturnType(node.returntype), ...prettifyThrowType(node.throwtype), '{', ...prettifyListOfDecl(node.listdecl), 'return', ...prettifyExpr(node.expr), '}']
}
function prettifyDeclTypeAlias(node: DeclTypeAlias): string[] {
  return ['type', printStellaIdent(node.stellaident), '=', ...prettifyType(node.type_)]
}
function prettifyDeclExceptionType(node: DeclExceptionType): string[] {
  return ['exception', 'type', '=', ...prettifyType(node.type_)]
}
function prettifyDeclExceptionVariant(node: DeclExceptionVariant): string[] {
  return ['exception', 'variant', printStellaIdent(node.stellaident), ':', ...prettifyType(node.type_)]
}

function prettifyListOfDecl(list: Array<decl>): string[] {
  return list.length === 0
    ? []
    : list.map(item => [...prettifyDecl(item), '']).flat().slice(0, -1)
}

function prettifyLocalDecl(node: localDecl): string[] {
  if (node.type === 'ALocalDecl') {
    return prettifyALocalDecl(node)
  }
  throw new Error(`[prettifyLocalDecl]: Unkown node`)
}

function prettifyALocalDecl(node: ALocalDecl): string[] {
  return [...prettifyDecl(node.decl)]
}

function prettifyListOfLocalDecl(list: Array<localDecl>): string[] {
  return list.length === 0
    ? []
    : list.map(item => [...prettifyLocalDecl(item), ';']).flat()
}

function prettifyAnnotation(node: annotation): string[] {
  if (node.type === 'InlineAnnotation') {
    return prettifyInlineAnnotation(node)
  }
  throw new Error(`[prettifyAnnotation]: Unkown node`)
}

function prettifyInlineAnnotation(node: InlineAnnotation): string[] {
  return ['inline']
}

function prettifyListOfAnnotation(list: Array<annotation>): string[] {
  return list.length === 0
    ? []
    : list.map(item => [...prettifyAnnotation(item), '']).flat().slice(0, -1)
}

function prettifyParamDecl(node: paramDecl): string[] {
  if (node.type === 'AParamDecl') {
    return prettifyAParamDecl(node)
  }
  throw new Error(`[prettifyParamDecl]: Unkown node`)
}

function prettifyAParamDecl(node: AParamDecl): string[] {
  return [printStellaIdent(node.stellaident), ':', ...prettifyType(node.type_)]
}

function prettifyListOfParamDecl(list: Array<paramDecl>): string[] {
  return list.length === 0
    ? []
    : list.map(item => [...prettifyParamDecl(item), ',']).flat().slice(0, -1)
}

function prettifyReturnType(node: returnType): string[] {
  if (node.type === 'NoReturnType') {
    return prettifyNoReturnType(node)
  }
  if (node.type === 'SomeReturnType') {
    return prettifySomeReturnType(node)
  }
  throw new Error(`[prettifyReturnType]: Unkown node`)
}

function prettifyNoReturnType(node: NoReturnType): string[] {
  return []
}
function prettifySomeReturnType(node: SomeReturnType): string[] {
  return ['->', ...prettifyType(node.type_)]
}

function prettifyThrowType(node: throwType): string[] {
  if (node.type === 'NoThrowType') {
    return prettifyNoThrowType(node)
  }
  if (node.type === 'SomeThrowType') {
    return prettifySomeThrowType(node)
  }
  throw new Error(`[prettifyThrowType]: Unkown node`)
}

function prettifyNoThrowType(node: NoThrowType): string[] {
  return []
}
function prettifySomeThrowType(node: SomeThrowType): string[] {
  return ['throws', ...prettifyListOfType9(node.listtype)]
}

function prettifyListOfType9(list: Array<type_>): string[] {
  return list.length === 0
    ? []
    : list.map(item => [...prettifyType(item), ',']).flat().slice(0, -1)
}

function prettifyMatchCase(node: matchCase): string[] {
  if (node.type === 'AMatchCase') {
    return prettifyAMatchCase(node)
  }
  throw new Error(`[prettifyMatchCase]: Unkown node`)
}

function prettifyAMatchCase(node: AMatchCase): string[] {
  return [...prettifyPattern(node.pattern), '=>', ...prettifyExpr(node.expr)]
}

function prettifyListOfMatchCase(list: Array<matchCase>): string[] {
  return list.length === 0
    ? []
    : list.map(item => [...prettifyMatchCase(item), '|']).flat().slice(0, -1)
}

function prettifyOptionalTyping(node: optionalTyping): string[] {
  if (node.type === 'NoTyping') {
    return prettifyNoTyping(node)
  }
  if (node.type === 'SomeTyping') {
    return prettifySomeTyping(node)
  }
  throw new Error(`[prettifyOptionalTyping]: Unkown node`)
}

function prettifyNoTyping(node: NoTyping): string[] {
  return []
}
function prettifySomeTyping(node: SomeTyping): string[] {
  return [':', ...prettifyType(node.type_)]
}

function prettifyPatternData(node: patternData): string[] {
  if (node.type === 'NoPatternData') {
    return prettifyNoPatternData(node)
  }
  if (node.type === 'SomePatternData') {
    return prettifySomePatternData(node)
  }
  throw new Error(`[prettifyPatternData]: Unkown node`)
}

function prettifyNoPatternData(node: NoPatternData): string[] {
  return []
}
function prettifySomePatternData(node: SomePatternData): string[] {
  return ['=', ...prettifyPattern(node.pattern)]
}

function prettifyExprData(node: exprData): string[] {
  if (node.type === 'NoExprData') {
    return prettifyNoExprData(node)
  }
  if (node.type === 'SomeExprData') {
    return prettifySomeExprData(node)
  }
  throw new Error(`[prettifyExprData]: Unkown node`)
}

function prettifyNoExprData(node: NoExprData): string[] {
  return []
}
function prettifySomeExprData(node: SomeExprData): string[] {
  return ['=', ...prettifyExpr(node.expr)]
}

function prettifyPattern(node: pattern): string[] {
  if (node.type === 'PatternCastAs') {
    return prettifyPatternCastAs(node)
  }
  if (node.type === 'PatternAsc') {
    return prettifyPatternAsc(node)
  }
  if (node.type === 'PatternVariant') {
    return prettifyPatternVariant(node)
  }
  if (node.type === 'PatternInl') {
    return prettifyPatternInl(node)
  }
  if (node.type === 'PatternInr') {
    return prettifyPatternInr(node)
  }
  if (node.type === 'PatternTuple') {
    return prettifyPatternTuple(node)
  }
  if (node.type === 'PatternRecord') {
    return prettifyPatternRecord(node)
  }
  if (node.type === 'PatternList') {
    return prettifyPatternList(node)
  }
  if (node.type === 'PatternCons') {
    return prettifyPatternCons(node)
  }
  if (node.type === 'PatternFalse') {
    return prettifyPatternFalse(node)
  }
  if (node.type === 'PatternTrue') {
    return prettifyPatternTrue(node)
  }
  if (node.type === 'PatternUnit') {
    return prettifyPatternUnit(node)
  }
  if (node.type === 'PatternInt') {
    return prettifyPatternInt(node)
  }
  if (node.type === 'PatternSucc') {
    return prettifyPatternSucc(node)
  }
  if (node.type === 'PatternVar') {
    return prettifyPatternVar(node)
  }
  throw new Error(`[prettifyPattern]: Unkown node`)
}

function prettifyPatternCastAs(node: PatternCastAs): string[] {
  return [...prettifyPattern(node.pattern), 'cast', 'as', ...prettifyType(node.type_)]
}
function prettifyPatternAsc(node: PatternAsc): string[] {
  return [...prettifyPattern(node.pattern), 'as', ...prettifyType(node.type_)]
}
function prettifyPatternVariant(node: PatternVariant): string[] {
  return ['<|', printStellaIdent(node.stellaident), ...prettifyPatternData(node.patterndata), '|>']
}
function prettifyPatternInl(node: PatternInl): string[] {
  return ['inl', '(', ...prettifyPattern(node.pattern), ')']
}
function prettifyPatternInr(node: PatternInr): string[] {
  return ['inr', '(', ...prettifyPattern(node.pattern), ')']
}
function prettifyPatternTuple(node: PatternTuple): string[] {
  return ['{', ...prettifyListOfPattern(node.listpattern), '}']
}
function prettifyPatternRecord(node: PatternRecord): string[] {
  return ['{', ...prettifyListOfLabelledPattern(node.listlabelledpattern), '}']
}
function prettifyPatternList(node: PatternList): string[] {
  return ['[', ...prettifyListOfPattern(node.listpattern), ']']
}
function prettifyPatternCons(node: PatternCons): string[] {
  return ['cons', '(', ...prettifyPattern(node.pattern_1), ',', ...prettifyPattern(node.pattern_2), ')']
}
function prettifyPatternFalse(node: PatternFalse): string[] {
  return ['false']
}
function prettifyPatternTrue(node: PatternTrue): string[] {
  return ['true']
}
function prettifyPatternUnit(node: PatternUnit): string[] {
  return ['unit']
}
function prettifyPatternInt(node: PatternInt): string[] {
  return [printInteger(node.integer)]
}
function prettifyPatternSucc(node: PatternSucc): string[] {
  return ['succ', '(', ...prettifyPattern(node.pattern), ')']
}
function prettifyPatternVar(node: PatternVar): string[] {
  return [printStellaIdent(node.stellaident)]
}

function prettifyListOfPattern(list: Array<pattern>): string[] {
  return list.length === 0
    ? []
    : list.map(item => [...prettifyPattern(item), ',']).flat().slice(0, -1)
}

function prettifyLabelledPattern(node: labelledPattern): string[] {
  if (node.type === 'ALabelledPattern') {
    return prettifyALabelledPattern(node)
  }
  throw new Error(`[prettifyLabelledPattern]: Unkown node`)
}

function prettifyALabelledPattern(node: ALabelledPattern): string[] {
  return [printStellaIdent(node.stellaident), '=', ...prettifyPattern(node.pattern)]
}

function prettifyListOfLabelledPattern(list: Array<labelledPattern>): string[] {
  return list.length === 0
    ? []
    : list.map(item => [...prettifyLabelledPattern(item), ',']).flat().slice(0, -1)
}

function prettifyBinding(node: binding): string[] {
  if (node.type === 'ABinding') {
    return prettifyABinding(node)
  }
  throw new Error(`[prettifyBinding]: Unkown node`)
}

function prettifyABinding(node: ABinding): string[] {
  return [printStellaIdent(node.stellaident), '=', ...prettifyExpr(node.expr)]
}

function prettifyListOfBinding(list: Array<binding>): string[] {
  return list.length === 0
    ? []
    : list.map(item => [...prettifyBinding(item), ',']).flat().slice(0, -1)
}

function prettifyExpr(node: expr): string[] {
  if (node.type === 'Sequence') {
    return prettifySequence(node)
  }
  if (node.type === 'Assign') {
    return prettifyAssign(node)
  }
  if (node.type === 'If') {
    return prettifyIf(node)
  }
  if (node.type === 'Let') {
    return prettifyLet(node)
  }
  if (node.type === 'LetRec') {
    return prettifyLetRec(node)
  }
  if (node.type === 'TypeAbstraction') {
    return prettifyTypeAbstraction(node)
  }
  if (node.type === 'LessThan') {
    return prettifyLessThan(node)
  }
  if (node.type === 'LessThanOrEqual') {
    return prettifyLessThanOrEqual(node)
  }
  if (node.type === 'GreaterThan') {
    return prettifyGreaterThan(node)
  }
  if (node.type === 'GreaterThanOrEqual') {
    return prettifyGreaterThanOrEqual(node)
  }
  if (node.type === 'Equal') {
    return prettifyEqual(node)
  }
  if (node.type === 'NotEqual') {
    return prettifyNotEqual(node)
  }
  if (node.type === 'TypeAsc') {
    return prettifyTypeAsc(node)
  }
  if (node.type === 'TypeCast') {
    return prettifyTypeCast(node)
  }
  if (node.type === 'Abstraction') {
    return prettifyAbstraction(node)
  }
  if (node.type === 'Variant') {
    return prettifyVariant(node)
  }
  if (node.type === 'Match') {
    return prettifyMatch(node)
  }
  if (node.type === 'List') {
    return prettifyList(node)
  }
  if (node.type === 'Add') {
    return prettifyAdd(node)
  }
  if (node.type === 'Subtract') {
    return prettifySubtract(node)
  }
  if (node.type === 'LogicOr') {
    return prettifyLogicOr(node)
  }
  if (node.type === 'Multiply') {
    return prettifyMultiply(node)
  }
  if (node.type === 'Divide') {
    return prettifyDivide(node)
  }
  if (node.type === 'LogicAnd') {
    return prettifyLogicAnd(node)
  }
  if (node.type === 'Ref') {
    return prettifyRef(node)
  }
  if (node.type === 'Deref') {
    return prettifyDeref(node)
  }
  if (node.type === 'Application') {
    return prettifyApplication(node)
  }
  if (node.type === 'TypeApplication') {
    return prettifyTypeApplication(node)
  }
  if (node.type === 'DotRecord') {
    return prettifyDotRecord(node)
  }
  if (node.type === 'DotTuple') {
    return prettifyDotTuple(node)
  }
  if (node.type === 'Tuple') {
    return prettifyTuple(node)
  }
  if (node.type === 'Record') {
    return prettifyRecord(node)
  }
  if (node.type === 'ConsList') {
    return prettifyConsList(node)
  }
  if (node.type === 'Head') {
    return prettifyHead(node)
  }
  if (node.type === 'IsEmpty') {
    return prettifyIsEmpty(node)
  }
  if (node.type === 'Tail') {
    return prettifyTail(node)
  }
  if (node.type === 'Panic') {
    return prettifyPanic(node)
  }
  if (node.type === 'Throw') {
    return prettifyThrow(node)
  }
  if (node.type === 'TryCatch') {
    return prettifyTryCatch(node)
  }
  if (node.type === 'TryWith') {
    return prettifyTryWith(node)
  }
  if (node.type === 'TryCastAs') {
    return prettifyTryCastAs(node)
  }
  if (node.type === 'Inl') {
    return prettifyInl(node)
  }
  if (node.type === 'Inr') {
    return prettifyInr(node)
  }
  if (node.type === 'Succ') {
    return prettifySucc(node)
  }
  if (node.type === 'LogicNot') {
    return prettifyLogicNot(node)
  }
  if (node.type === 'Pred') {
    return prettifyPred(node)
  }
  if (node.type === 'IsZero') {
    return prettifyIsZero(node)
  }
  if (node.type === 'Fix') {
    return prettifyFix(node)
  }
  if (node.type === 'NatRec') {
    return prettifyNatRec(node)
  }
  if (node.type === 'Fold') {
    return prettifyFold(node)
  }
  if (node.type === 'Unfold') {
    return prettifyUnfold(node)
  }
  if (node.type === 'ConstTrue') {
    return prettifyConstTrue(node)
  }
  if (node.type === 'ConstFalse') {
    return prettifyConstFalse(node)
  }
  if (node.type === 'ConstUnit') {
    return prettifyConstUnit(node)
  }
  if (node.type === 'ConstInt') {
    return prettifyConstInt(node)
  }
  if (node.type === 'ConstMemory') {
    return prettifyConstMemory(node)
  }
  if (node.type === 'Var') {
    return prettifyVar(node)
  }
  throw new Error(`[prettifyExpr]: Unkown node`)
}

function prettifySequence(node: Sequence): string[] {
  return [...prettifyExpr(node.expr_1), ';', ...prettifyExpr(node.expr_2)]
}
function prettifyAssign(node: Assign): string[] {
  return [...prettifyExpr(node.expr_1), ':=', ...prettifyExpr(node.expr_2)]
}
function prettifyIf(node: If): string[] {
  return ['if', ...prettifyExpr(node.expr_1), 'then', ...prettifyExpr(node.expr_2), 'else', ...prettifyExpr(node.expr_3)]
}
function prettifyLet(node: Let): string[] {
  return ['let', ...prettifyListOfPatternBinding(node.listpatternbinding), 'in', ...prettifyExpr(node.expr)]
}
function prettifyLetRec(node: LetRec): string[] {
  return ['letrec', ...prettifyListOfPatternBinding(node.listpatternbinding), 'in', ...prettifyExpr(node.expr)]
}
function prettifyTypeAbstraction(node: TypeAbstraction): string[] {
  return ['generic', '[', ...prettifyListOfStellaIdent(node.liststellaident), ']', ...prettifyExpr(node.expr)]
}
function prettifyLessThan(node: LessThan): string[] {
  return [...prettifyExpr(node.expr_1), '<', ...prettifyExpr(node.expr_2)]
}
function prettifyLessThanOrEqual(node: LessThanOrEqual): string[] {
  return [...prettifyExpr(node.expr_1), '<=', ...prettifyExpr(node.expr_2)]
}
function prettifyGreaterThan(node: GreaterThan): string[] {
  return [...prettifyExpr(node.expr_1), '>', ...prettifyExpr(node.expr_2)]
}
function prettifyGreaterThanOrEqual(node: GreaterThanOrEqual): string[] {
  return [...prettifyExpr(node.expr_1), '>=', ...prettifyExpr(node.expr_2)]
}
function prettifyEqual(node: Equal): string[] {
  return [...prettifyExpr(node.expr_1), '==', ...prettifyExpr(node.expr_2)]
}
function prettifyNotEqual(node: NotEqual): string[] {
  return [...prettifyExpr(node.expr_1), '!=', ...prettifyExpr(node.expr_2)]
}
function prettifyTypeAsc(node: TypeAsc): string[] {
  return [...prettifyExpr(node.expr), 'as', ...prettifyType(node.type_)]
}
function prettifyTypeCast(node: TypeCast): string[] {
  return [...prettifyExpr(node.expr), 'cast', 'as', ...prettifyType(node.type_)]
}
function prettifyAbstraction(node: Abstraction): string[] {
  return ['fn', '(', ...prettifyListOfParamDecl(node.listparamdecl), ')', '{', 'return', ...prettifyExpr(node.expr), '}']
}
function prettifyVariant(node: Variant): string[] {
  return ['<|', printStellaIdent(node.stellaident), ...prettifyExprData(node.exprdata), '|>']
}
function prettifyMatch(node: Match): string[] {
  return ['match', ...prettifyExpr(node.expr), '{', ...prettifyListOfMatchCase(node.listmatchcase), '}']
}
function prettifyList(node: List): string[] {
  return ['[', ...prettifyListOfExpr(node.listexpr), ']']
}
function prettifyAdd(node: Add): string[] {
  return [...prettifyExpr(node.expr_1), '+', ...prettifyExpr(node.expr_2)]
}
function prettifySubtract(node: Subtract): string[] {
  return [...prettifyExpr(node.expr_1), '-', ...prettifyExpr(node.expr_2)]
}
function prettifyLogicOr(node: LogicOr): string[] {
  return [...prettifyExpr(node.expr_1), 'or', ...prettifyExpr(node.expr_2)]
}
function prettifyMultiply(node: Multiply): string[] {
  return [...prettifyExpr(node.expr_1), '*', ...prettifyExpr(node.expr_2)]
}
function prettifyDivide(node: Divide): string[] {
  return [...prettifyExpr(node.expr_1), '/', ...prettifyExpr(node.expr_2)]
}
function prettifyLogicAnd(node: LogicAnd): string[] {
  return [...prettifyExpr(node.expr_1), 'and', ...prettifyExpr(node.expr_2)]
}
function prettifyRef(node: Ref): string[] {
  return ['new', '(', ...prettifyExpr(node.expr), ')']
}
function prettifyDeref(node: Deref): string[] {
  return ['*', ...prettifyExpr(node.expr)]
}
function prettifyApplication(node: Application): string[] {
  return [...prettifyExpr(node.expr), '(', ...prettifyListOfExpr(node.listexpr), ')']
}
function prettifyTypeApplication(node: TypeApplication): string[] {
  return [...prettifyExpr(node.expr), '[', ...prettifyListOfType(node.listtype), ']']
}
function prettifyDotRecord(node: DotRecord): string[] {
  return [...prettifyExpr(node.expr), '.', printStellaIdent(node.stellaident)]
}
function prettifyDotTuple(node: DotTuple): string[] {
  return [...prettifyExpr(node.expr), '.', printInteger(node.integer)]
}
function prettifyTuple(node: Tuple): string[] {
  return ['{', ...prettifyListOfExpr(node.listexpr), '}']
}
function prettifyRecord(node: Record): string[] {
  return ['{', ...prettifyListOfBinding(node.listbinding), '}']
}
function prettifyConsList(node: ConsList): string[] {
  return ['cons', '(', ...prettifyExpr(node.expr_1), ',', ...prettifyExpr(node.expr_2), ')']
}
function prettifyHead(node: Head): string[] {
  return ['List::head', '(', ...prettifyExpr(node.expr), ')']
}
function prettifyIsEmpty(node: IsEmpty): string[] {
  return ['List::isempty', '(', ...prettifyExpr(node.expr), ')']
}
function prettifyTail(node: Tail): string[] {
  return ['List::tail', '(', ...prettifyExpr(node.expr), ')']
}
function prettifyPanic(node: Panic): string[] {
  return ['panic!']
}
function prettifyThrow(node: Throw): string[] {
  return ['throw', '(', ...prettifyExpr(node.expr), ')']
}
function prettifyTryCatch(node: TryCatch): string[] {
  return ['try', '{', ...prettifyExpr(node.expr_1), '}', 'catch', '{', ...prettifyPattern(node.pattern), '=>', ...prettifyExpr(node.expr_2), '}']
}
function prettifyTryWith(node: TryWith): string[] {
  return ['try', '{', ...prettifyExpr(node.expr_1), '}', 'with', '{', ...prettifyExpr(node.expr_2), '}']
}
function prettifyTryCastAs(node: TryCastAs): string[] {
  return ['try', '{', ...prettifyExpr(node.expr_1), '}', 'cast', 'as', ...prettifyType(node.type_), '{', ...prettifyPattern(node.pattern), '=>', ...prettifyExpr(node.expr_2), '}', 'with', '{', ...prettifyExpr(node.expr_3), '}']
}
function prettifyInl(node: Inl): string[] {
  return ['inl', '(', ...prettifyExpr(node.expr), ')']
}
function prettifyInr(node: Inr): string[] {
  return ['inr', '(', ...prettifyExpr(node.expr), ')']
}
function prettifySucc(node: Succ): string[] {
  return ['succ', '(', ...prettifyExpr(node.expr), ')']
}
function prettifyLogicNot(node: LogicNot): string[] {
  return ['not', '(', ...prettifyExpr(node.expr), ')']
}
function prettifyPred(node: Pred): string[] {
  return ['Nat::pred', '(', ...prettifyExpr(node.expr), ')']
}
function prettifyIsZero(node: IsZero): string[] {
  return ['Nat::iszero', '(', ...prettifyExpr(node.expr), ')']
}
function prettifyFix(node: Fix): string[] {
  return ['fix', '(', ...prettifyExpr(node.expr), ')']
}
function prettifyNatRec(node: NatRec): string[] {
  return ['Nat::rec', '(', ...prettifyExpr(node.expr_1), ',', ...prettifyExpr(node.expr_2), ',', ...prettifyExpr(node.expr_3), ')']
}
function prettifyFold(node: Fold): string[] {
  return ['fold', '[', ...prettifyType(node.type_), ']', ...prettifyExpr(node.expr)]
}
function prettifyUnfold(node: Unfold): string[] {
  return ['unfold', '[', ...prettifyType(node.type_), ']', ...prettifyExpr(node.expr)]
}
function prettifyConstTrue(node: ConstTrue): string[] {
  return ['true']
}
function prettifyConstFalse(node: ConstFalse): string[] {
  return ['false']
}
function prettifyConstUnit(node: ConstUnit): string[] {
  return ['unit']
}
function prettifyConstInt(node: ConstInt): string[] {
  return [printInteger(node.integer)]
}
function prettifyConstMemory(node: ConstMemory): string[] {
  return [printMemoryAddress(node.memoryaddress)]
}
function prettifyVar(node: Var): string[] {
  return [printStellaIdent(node.stellaident)]
}

function prettifyListOfExpr(list: Array<expr>): string[] {
  return list.length === 0
    ? []
    : list.map(item => [...prettifyExpr(item), ',']).flat().slice(0, -1)
}

function prettifyPatternBinding(node: patternBinding): string[] {
  if (node.type === 'APatternBinding') {
    return prettifyAPatternBinding(node)
  }
  throw new Error(`[prettifyPatternBinding]: Unkown node`)
}

function prettifyAPatternBinding(node: APatternBinding): string[] {
  return [...prettifyPattern(node.pattern), '=', ...prettifyExpr(node.expr)]
}

function prettifyListOfPatternBinding(list: Array<patternBinding>): string[] {
  return list.length === 0
    ? []
    : list.map(item => [...prettifyPatternBinding(item), ',']).flat().slice(0, -1)
}

function prettifyListOfExpr2(list: Array<expr>): string[] {
  return list.length === 0
    ? []
    : list.map(item => [...prettifyExpr(item), ';']).flat()
}

function prettifyType(node: type_): string[] {
  if (node.type === 'TypeAuto') {
    return prettifyTypeAuto(node)
  }
  if (node.type === 'TypeFun') {
    return prettifyTypeFun(node)
  }
  if (node.type === 'TypeForAll') {
    return prettifyTypeForAll(node)
  }
  if (node.type === 'TypeRec') {
    return prettifyTypeRec(node)
  }
  if (node.type === 'TypeSum') {
    return prettifyTypeSum(node)
  }
  if (node.type === 'TypeTuple') {
    return prettifyTypeTuple(node)
  }
  if (node.type === 'TypeRecord') {
    return prettifyTypeRecord(node)
  }
  if (node.type === 'TypeVariant') {
    return prettifyTypeVariant(node)
  }
  if (node.type === 'TypeList') {
    return prettifyTypeList(node)
  }
  if (node.type === 'TypeBool') {
    return prettifyTypeBool(node)
  }
  if (node.type === 'TypeNat') {
    return prettifyTypeNat(node)
  }
  if (node.type === 'TypeUnit') {
    return prettifyTypeUnit(node)
  }
  if (node.type === 'TypeTop') {
    return prettifyTypeTop(node)
  }
  if (node.type === 'TypeBottom') {
    return prettifyTypeBottom(node)
  }
  if (node.type === 'TypeRef') {
    return prettifyTypeRef(node)
  }
  if (node.type === 'TypeVar') {
    return prettifyTypeVar(node)
  }
  throw new Error(`[prettifyType]: Unkown node`)
}

function prettifyTypeAuto(node: TypeAuto): string[] {
  return ['auto']
}
function prettifyTypeFun(node: TypeFun): string[] {
  return ['fn', '(', ...prettifyListOfType(node.listtype), ')', '->', ...prettifyType(node.type_)]
}
function prettifyTypeForAll(node: TypeForAll): string[] {
  return ['forall', ...prettifyListOfStellaIdent(node.liststellaident), '.', ...prettifyType(node.type_)]
}
function prettifyTypeRec(node: TypeRec): string[] {
  return ['µ', printStellaIdent(node.stellaident), '.', ...prettifyType(node.type_)]
}
function prettifyTypeSum(node: TypeSum): string[] {
  return [...prettifyType(node.type_1), '+', ...prettifyType(node.type_2)]
}
function prettifyTypeTuple(node: TypeTuple): string[] {
  return ['{', ...prettifyListOfType(node.listtype), '}']
}
function prettifyTypeRecord(node: TypeRecord): string[] {
  return ['{', ...prettifyListOfRecordFieldType(node.listrecordfieldtype), '}']
}
function prettifyTypeVariant(node: TypeVariant): string[] {
  return ['<|', ...prettifyListOfVariantFieldType(node.listvariantfieldtype), '|>']
}
function prettifyTypeList(node: TypeList): string[] {
  return ['[', ...prettifyType(node.type_), ']']
}
function prettifyTypeBool(node: TypeBool): string[] {
  return ['Bool']
}
function prettifyTypeNat(node: TypeNat): string[] {
  return ['Nat']
}
function prettifyTypeUnit(node: TypeUnit): string[] {
  return ['Unit']
}
function prettifyTypeTop(node: TypeTop): string[] {
  return ['Top']
}
function prettifyTypeBottom(node: TypeBottom): string[] {
  return ['Bot']
}
function prettifyTypeRef(node: TypeRef): string[] {
  return ['&', ...prettifyType(node.type_)]
}
function prettifyTypeVar(node: TypeVar): string[] {
  return [printStellaIdent(node.stellaident)]
}

function prettifyListOfType(list: Array<type_>): string[] {
  return list.length === 0
    ? []
    : list.map(item => [...prettifyType(item), ',']).flat().slice(0, -1)
}

function prettifyVariantFieldType(node: variantFieldType): string[] {
  if (node.type === 'AVariantFieldType') {
    return prettifyAVariantFieldType(node)
  }
  throw new Error(`[prettifyVariantFieldType]: Unkown node`)
}

function prettifyAVariantFieldType(node: AVariantFieldType): string[] {
  return [printStellaIdent(node.stellaident), ...prettifyOptionalTyping(node.optionaltyping)]
}

function prettifyListOfVariantFieldType(list: Array<variantFieldType>): string[] {
  return list.length === 0
    ? []
    : list.map(item => [...prettifyVariantFieldType(item), ',']).flat().slice(0, -1)
}

function prettifyRecordFieldType(node: recordFieldType): string[] {
  if (node.type === 'ARecordFieldType') {
    return prettifyARecordFieldType(node)
  }
  throw new Error(`[prettifyRecordFieldType]: Unkown node`)
}

function prettifyARecordFieldType(node: ARecordFieldType): string[] {
  return [printStellaIdent(node.stellaident), ':', ...prettifyType(node.type_)]
}

function prettifyListOfRecordFieldType(list: Array<recordFieldType>): string[] {
  return list.length === 0
    ? []
    : list.map(item => [...prettifyRecordFieldType(item), ',']).flat().slice(0, -1)
}

function prettifyTyping(node: typing): string[] {
  if (node.type === 'ATyping') {
    return prettifyATyping(node)
  }
  throw new Error(`[prettifyTyping]: Unkown node`)
}

function prettifyATyping(node: ATyping): string[] {
  return [...prettifyExpr(node.expr), ':', ...prettifyType(node.type_)]
}
export function printAProgram(node: AProgram): string {
  return renderer.print(prettifyAProgram(node))
}
export function printLanguageCore(node: LanguageCore): string {
  return renderer.print(prettifyLanguageCore(node))
}
export function printAnExtension(node: AnExtension): string {
  return renderer.print(prettifyAnExtension(node))
}
export function printDeclFun(node: DeclFun): string {
  return renderer.print(prettifyDeclFun(node))
}
export function printDeclFunGeneric(node: DeclFunGeneric): string {
  return renderer.print(prettifyDeclFunGeneric(node))
}
export function printDeclTypeAlias(node: DeclTypeAlias): string {
  return renderer.print(prettifyDeclTypeAlias(node))
}
export function printDeclExceptionType(node: DeclExceptionType): string {
  return renderer.print(prettifyDeclExceptionType(node))
}
export function printDeclExceptionVariant(node: DeclExceptionVariant): string {
  return renderer.print(prettifyDeclExceptionVariant(node))
}
export function printALocalDecl(node: ALocalDecl): string {
  return renderer.print(prettifyALocalDecl(node))
}
export function printInlineAnnotation(node: InlineAnnotation): string {
  return renderer.print(prettifyInlineAnnotation(node))
}
export function printAParamDecl(node: AParamDecl): string {
  return renderer.print(prettifyAParamDecl(node))
}
export function printNoReturnType(node: NoReturnType): string {
  return renderer.print(prettifyNoReturnType(node))
}
export function printSomeReturnType(node: SomeReturnType): string {
  return renderer.print(prettifySomeReturnType(node))
}
export function printNoThrowType(node: NoThrowType): string {
  return renderer.print(prettifyNoThrowType(node))
}
export function printSomeThrowType(node: SomeThrowType): string {
  return renderer.print(prettifySomeThrowType(node))
}
export function printAMatchCase(node: AMatchCase): string {
  return renderer.print(prettifyAMatchCase(node))
}
export function printNoTyping(node: NoTyping): string {
  return renderer.print(prettifyNoTyping(node))
}
export function printSomeTyping(node: SomeTyping): string {
  return renderer.print(prettifySomeTyping(node))
}
export function printNoPatternData(node: NoPatternData): string {
  return renderer.print(prettifyNoPatternData(node))
}
export function printSomePatternData(node: SomePatternData): string {
  return renderer.print(prettifySomePatternData(node))
}
export function printNoExprData(node: NoExprData): string {
  return renderer.print(prettifyNoExprData(node))
}
export function printSomeExprData(node: SomeExprData): string {
  return renderer.print(prettifySomeExprData(node))
}
export function printPatternCastAs(node: PatternCastAs): string {
  return renderer.print(prettifyPatternCastAs(node))
}
export function printPatternAsc(node: PatternAsc): string {
  return renderer.print(prettifyPatternAsc(node))
}
export function printPatternVariant(node: PatternVariant): string {
  return renderer.print(prettifyPatternVariant(node))
}
export function printPatternInl(node: PatternInl): string {
  return renderer.print(prettifyPatternInl(node))
}
export function printPatternInr(node: PatternInr): string {
  return renderer.print(prettifyPatternInr(node))
}
export function printPatternTuple(node: PatternTuple): string {
  return renderer.print(prettifyPatternTuple(node))
}
export function printPatternRecord(node: PatternRecord): string {
  return renderer.print(prettifyPatternRecord(node))
}
export function printPatternList(node: PatternList): string {
  return renderer.print(prettifyPatternList(node))
}
export function printPatternCons(node: PatternCons): string {
  return renderer.print(prettifyPatternCons(node))
}
export function printPatternFalse(node: PatternFalse): string {
  return renderer.print(prettifyPatternFalse(node))
}
export function printPatternTrue(node: PatternTrue): string {
  return renderer.print(prettifyPatternTrue(node))
}
export function printPatternUnit(node: PatternUnit): string {
  return renderer.print(prettifyPatternUnit(node))
}
export function printPatternInt(node: PatternInt): string {
  return renderer.print(prettifyPatternInt(node))
}
export function printPatternSucc(node: PatternSucc): string {
  return renderer.print(prettifyPatternSucc(node))
}
export function printPatternVar(node: PatternVar): string {
  return renderer.print(prettifyPatternVar(node))
}
export function printALabelledPattern(node: ALabelledPattern): string {
  return renderer.print(prettifyALabelledPattern(node))
}
export function printABinding(node: ABinding): string {
  return renderer.print(prettifyABinding(node))
}
export function printSequence(node: Sequence): string {
  return renderer.print(prettifySequence(node))
}
export function printAssign(node: Assign): string {
  return renderer.print(prettifyAssign(node))
}
export function printIf(node: If): string {
  return renderer.print(prettifyIf(node))
}
export function printLet(node: Let): string {
  return renderer.print(prettifyLet(node))
}
export function printLetRec(node: LetRec): string {
  return renderer.print(prettifyLetRec(node))
}
export function printTypeAbstraction(node: TypeAbstraction): string {
  return renderer.print(prettifyTypeAbstraction(node))
}
export function printLessThan(node: LessThan): string {
  return renderer.print(prettifyLessThan(node))
}
export function printLessThanOrEqual(node: LessThanOrEqual): string {
  return renderer.print(prettifyLessThanOrEqual(node))
}
export function printGreaterThan(node: GreaterThan): string {
  return renderer.print(prettifyGreaterThan(node))
}
export function printGreaterThanOrEqual(node: GreaterThanOrEqual): string {
  return renderer.print(prettifyGreaterThanOrEqual(node))
}
export function printEqual(node: Equal): string {
  return renderer.print(prettifyEqual(node))
}
export function printNotEqual(node: NotEqual): string {
  return renderer.print(prettifyNotEqual(node))
}
export function printTypeAsc(node: TypeAsc): string {
  return renderer.print(prettifyTypeAsc(node))
}
export function printTypeCast(node: TypeCast): string {
  return renderer.print(prettifyTypeCast(node))
}
export function printAbstraction(node: Abstraction): string {
  return renderer.print(prettifyAbstraction(node))
}
export function printVariant(node: Variant): string {
  return renderer.print(prettifyVariant(node))
}
export function printMatch(node: Match): string {
  return renderer.print(prettifyMatch(node))
}
export function printList(node: List): string {
  return renderer.print(prettifyList(node))
}
export function printAdd(node: Add): string {
  return renderer.print(prettifyAdd(node))
}
export function printSubtract(node: Subtract): string {
  return renderer.print(prettifySubtract(node))
}
export function printLogicOr(node: LogicOr): string {
  return renderer.print(prettifyLogicOr(node))
}
export function printMultiply(node: Multiply): string {
  return renderer.print(prettifyMultiply(node))
}
export function printDivide(node: Divide): string {
  return renderer.print(prettifyDivide(node))
}
export function printLogicAnd(node: LogicAnd): string {
  return renderer.print(prettifyLogicAnd(node))
}
export function printRef(node: Ref): string {
  return renderer.print(prettifyRef(node))
}
export function printDeref(node: Deref): string {
  return renderer.print(prettifyDeref(node))
}
export function printApplication(node: Application): string {
  return renderer.print(prettifyApplication(node))
}
export function printTypeApplication(node: TypeApplication): string {
  return renderer.print(prettifyTypeApplication(node))
}
export function printDotRecord(node: DotRecord): string {
  return renderer.print(prettifyDotRecord(node))
}
export function printDotTuple(node: DotTuple): string {
  return renderer.print(prettifyDotTuple(node))
}
export function printTuple(node: Tuple): string {
  return renderer.print(prettifyTuple(node))
}
export function printRecord(node: Record): string {
  return renderer.print(prettifyRecord(node))
}
export function printConsList(node: ConsList): string {
  return renderer.print(prettifyConsList(node))
}
export function printHead(node: Head): string {
  return renderer.print(prettifyHead(node))
}
export function printIsEmpty(node: IsEmpty): string {
  return renderer.print(prettifyIsEmpty(node))
}
export function printTail(node: Tail): string {
  return renderer.print(prettifyTail(node))
}
export function printPanic(node: Panic): string {
  return renderer.print(prettifyPanic(node))
}
export function printThrow(node: Throw): string {
  return renderer.print(prettifyThrow(node))
}
export function printTryCatch(node: TryCatch): string {
  return renderer.print(prettifyTryCatch(node))
}
export function printTryWith(node: TryWith): string {
  return renderer.print(prettifyTryWith(node))
}
export function printTryCastAs(node: TryCastAs): string {
  return renderer.print(prettifyTryCastAs(node))
}
export function printInl(node: Inl): string {
  return renderer.print(prettifyInl(node))
}
export function printInr(node: Inr): string {
  return renderer.print(prettifyInr(node))
}
export function printSucc(node: Succ): string {
  return renderer.print(prettifySucc(node))
}
export function printLogicNot(node: LogicNot): string {
  return renderer.print(prettifyLogicNot(node))
}
export function printPred(node: Pred): string {
  return renderer.print(prettifyPred(node))
}
export function printIsZero(node: IsZero): string {
  return renderer.print(prettifyIsZero(node))
}
export function printFix(node: Fix): string {
  return renderer.print(prettifyFix(node))
}
export function printNatRec(node: NatRec): string {
  return renderer.print(prettifyNatRec(node))
}
export function printFold(node: Fold): string {
  return renderer.print(prettifyFold(node))
}
export function printUnfold(node: Unfold): string {
  return renderer.print(prettifyUnfold(node))
}
export function printConstTrue(node: ConstTrue): string {
  return renderer.print(prettifyConstTrue(node))
}
export function printConstFalse(node: ConstFalse): string {
  return renderer.print(prettifyConstFalse(node))
}
export function printConstUnit(node: ConstUnit): string {
  return renderer.print(prettifyConstUnit(node))
}
export function printConstInt(node: ConstInt): string {
  return renderer.print(prettifyConstInt(node))
}
export function printConstMemory(node: ConstMemory): string {
  return renderer.print(prettifyConstMemory(node))
}
export function printVar(node: Var): string {
  return renderer.print(prettifyVar(node))
}
export function printAPatternBinding(node: APatternBinding): string {
  return renderer.print(prettifyAPatternBinding(node))
}
export function printTypeAuto(node: TypeAuto): string {
  return renderer.print(prettifyTypeAuto(node))
}
export function printTypeFun(node: TypeFun): string {
  return renderer.print(prettifyTypeFun(node))
}
export function printTypeForAll(node: TypeForAll): string {
  return renderer.print(prettifyTypeForAll(node))
}
export function printTypeRec(node: TypeRec): string {
  return renderer.print(prettifyTypeRec(node))
}
export function printTypeSum(node: TypeSum): string {
  return renderer.print(prettifyTypeSum(node))
}
export function printTypeTuple(node: TypeTuple): string {
  return renderer.print(prettifyTypeTuple(node))
}
export function printTypeRecord(node: TypeRecord): string {
  return renderer.print(prettifyTypeRecord(node))
}
export function printTypeVariant(node: TypeVariant): string {
  return renderer.print(prettifyTypeVariant(node))
}
export function printTypeList(node: TypeList): string {
  return renderer.print(prettifyTypeList(node))
}
export function printTypeBool(node: TypeBool): string {
  return renderer.print(prettifyTypeBool(node))
}
export function printTypeNat(node: TypeNat): string {
  return renderer.print(prettifyTypeNat(node))
}
export function printTypeUnit(node: TypeUnit): string {
  return renderer.print(prettifyTypeUnit(node))
}
export function printTypeTop(node: TypeTop): string {
  return renderer.print(prettifyTypeTop(node))
}
export function printTypeBottom(node: TypeBottom): string {
  return renderer.print(prettifyTypeBottom(node))
}
export function printTypeRef(node: TypeRef): string {
  return renderer.print(prettifyTypeRef(node))
}
export function printTypeVar(node: TypeVar): string {
  return renderer.print(prettifyTypeVar(node))
}
export function printAVariantFieldType(node: AVariantFieldType): string {
  return renderer.print(prettifyAVariantFieldType(node))
}
export function printARecordFieldType(node: ARecordFieldType): string {
  return renderer.print(prettifyARecordFieldType(node))
}
export function printATyping(node: ATyping): string {
  return renderer.print(prettifyATyping(node))
}
