// TypeScript File generated by the BNF Converter (bnfc 2.9.6).

import {Token} from 'antlr4'
import {ProgramContext, AProgramContext, ListStellaIdentContext, ListStellaIdent_EmptyContext, ListStellaIdent_AppendLastContext, ListStellaIdent_PrependFirstContext, LanguageDeclContext, LanguageCoreContext, ExtensionContext, AnExtensionContext, ListExtensionNameContext, ListExtensionName_EmptyContext, ListExtensionName_AppendLastContext, ListExtensionName_PrependFirstContext, ListExtensionContext, ListExtension_EmptyContext, ListExtension_PrependFirstContext, DeclContext, DeclFunContext, DeclFunGenericContext, DeclTypeAliasContext, DeclExceptionTypeContext, DeclExceptionVariantContext, ListDeclContext, ListDecl_EmptyContext, ListDecl_PrependFirstContext, LocalDeclContext, ALocalDeclContext, ListLocalDeclContext, ListLocalDecl_EmptyContext, ListLocalDecl_PrependFirstContext, AnnotationContext, InlineAnnotationContext, ListAnnotationContext, ListAnnotation_EmptyContext, ListAnnotation_PrependFirstContext, ParamDeclContext, AParamDeclContext, ListParamDeclContext, ListParamDecl_EmptyContext, ListParamDecl_AppendLastContext, ListParamDecl_PrependFirstContext, ReturnTypeContext, NoReturnTypeContext, SomeReturnTypeContext, ThrowTypeContext, NoThrowTypeContext, SomeThrowTypeContext, Type9Context, Coercion_Type9_1Context, ListType9Context, ListType9_AppendLastContext, ListType9_PrependFirstContext, MatchCaseContext, AMatchCaseContext, ListMatchCaseContext, ListMatchCase_EmptyContext, ListMatchCase_AppendLastContext, ListMatchCase_PrependFirstContext, OptionalTypingContext, NoTypingContext, SomeTypingContext, PatternDataContext, NoPatternDataContext, SomePatternDataContext, ExprDataContext, NoExprDataContext, SomeExprDataContext, PatternContext, PatternCastAsContext, PatternAscContext, PatternVariantContext, PatternInlContext, PatternInrContext, PatternTupleContext, PatternRecordContext, PatternListContext, PatternConsContext, PatternFalseContext, PatternTrueContext, PatternUnitContext, PatternIntContext, PatternSuccContext, PatternVarContext, Coercion_Pattern_16Context, ListPatternContext, ListPattern_EmptyContext, ListPattern_AppendLastContext, ListPattern_PrependFirstContext, LabelledPatternContext, ALabelledPatternContext, ListLabelledPatternContext, ListLabelledPattern_AppendLastContext, ListLabelledPattern_PrependFirstContext, BindingContext, ABindingContext, ListBindingContext, ListBinding_AppendLastContext, ListBinding_PrependFirstContext, ExprContext, SequenceContext, Coercion_Expr_2Context, LetContext, LetRecContext, TypeAbstractionContext, Coercion_Expr_6Context, ListExprContext, ListExpr_EmptyContext, ListExpr_AppendLastContext, ListExpr_PrependFirstContext, Expr1Context, AssignContext, IfContext, Coercion_Expr1_3Context, PatternBindingContext, APatternBindingContext, ListPatternBindingContext, ListPatternBinding_AppendLastContext, ListPatternBinding_PrependFirstContext, Expr2Context, LessThanContext, LessThanOrEqualContext, GreaterThanContext, GreaterThanOrEqualContext, EqualContext, NotEqualContext, Coercion_Expr2_7Context, ListExpr2Context, ListExpr2_AppendLastContext, ListExpr2_PrependFirstContext, Expr3Context, TypeAscContext, TypeCastContext, AbstractionContext, VariantContext, MatchContext, ListContext, AddContext, SubtractContext, LogicOrContext, Coercion_Expr3_10Context, Expr4Context, MultiplyContext, DivideContext, LogicAndContext, Coercion_Expr4_4Context, Expr5Context, RefContext, DerefContext, Coercion_Expr5_3Context, Expr6Context, ApplicationContext, TypeApplicationContext, DotRecordContext, DotTupleContext, TupleContext, RecordContext, ConsListContext, HeadContext, IsEmptyContext, TailContext, PanicContext, ThrowContext, TryCatchContext, TryWithContext, TryCastAsContext, InlContext, InrContext, SuccContext, LogicNotContext, PredContext, IsZeroContext, FixContext, NatRecContext, FoldContext, UnfoldContext, Coercion_Expr6_26Context, Expr7Context, ConstTrueContext, ConstFalseContext, ConstUnitContext, ConstIntContext, ConstMemoryContext, VarContext, Coercion_Expr7_7Context, TypeContext, TypeAutoContext, TypeFunContext, TypeForAllContext, TypeRecContext, Coercion_Type_5Context, Type1Context, TypeSumContext, Coercion_Type1_2Context, Type2Context, TypeTupleContext, TypeRecordContext, TypeVariantContext, TypeListContext, Coercion_Type2_5Context, Type3Context, TypeBoolContext, TypeNatContext, TypeUnitContext, TypeTopContext, TypeBottomContext, TypeRefContext, TypeVarContext, Coercion_Type3_8Context, ListTypeContext, ListType_EmptyContext, ListType_AppendLastContext, ListType_PrependFirstContext, VariantFieldTypeContext, AVariantFieldTypeContext, ListVariantFieldTypeContext, ListVariantFieldType_EmptyContext, ListVariantFieldType_AppendLastContext, ListVariantFieldType_PrependFirstContext, RecordFieldTypeContext, ARecordFieldTypeContext, ListRecordFieldTypeContext, ListRecordFieldType_AppendLastContext, ListRecordFieldType_PrependFirstContext, TypingContext, ATypingContext} from './StellaParser'
import {integerToken, stellaIdentToken, extensionNameToken, memoryAddressToken, program, languageDecl, extension, decl, localDecl, annotation, paramDecl, returnType, throwType, matchCase, optionalTyping, patternData, exprData, pattern, labelledPattern, binding, expr, patternBinding, type_, variantFieldType, recordFieldType, typing} from './abstract'

export function buildIntegerToken(arg: Token): integerToken {
  return {
    type: 'IntegerToken',
    value: parseInt(arg.text)
  }
}

export function buildStellaIdentToken(arg: Token): stellaIdentToken {
  return {
    type: 'StellaIdentToken',
    value: arg.text
  }
}

export function buildExtensionNameToken(arg: Token): extensionNameToken {
  return {
    type: 'ExtensionNameToken',
    value: arg.text
  }
}

export function buildMemoryAddressToken(arg: Token): memoryAddressToken {
  return {
    type: 'MemoryAddressToken',
    value: arg.text
  }
}

export function buildProgram(arg: ProgramContext): program {
  if (arg instanceof AProgramContext) {
    const languagedecl = buildLanguageDecl(arg._p_1_1)
    const listextension = buildExtensionList(arg._p_1_2)
    const listdecl = buildDeclList(arg._p_1_3)
    return {
      type: 'AProgram',
      languagedecl,
      listextension,
      listdecl,
    }
  }
  throw new Error('[buildProgram] Error: arg should be an instance of ProgramContext')
}

export function buildStellaIdentTokenList(arg: ListStellaIdentContext): Array<stellaIdentToken> {
  if (arg instanceof ListStellaIdent_EmptyContext) {
    return []
  }
  if (arg instanceof ListStellaIdent_AppendLastContext) {
    const data = buildStellaIdentToken(arg._p_2_1)
    return [data]
  }
  if (arg instanceof ListStellaIdent_PrependFirstContext) {
    const value1 = buildStellaIdentToken(arg._p_3_1)
    const value2 = buildStellaIdentTokenList(arg._p_3_3)
    return [value1, ...value2]
  }
  throw new Error('[buildStellaIdentTokenList] Error: arg should be an instance of ListStellaIdentContext')
}

export function buildLanguageDecl(arg: LanguageDeclContext): languageDecl {
  if (arg instanceof LanguageCoreContext) {
    return {
      type: 'LanguageCore',
    }
  }
  throw new Error('[buildLanguageDecl] Error: arg should be an instance of LanguageDeclContext')
}

export function buildExtension(arg: ExtensionContext): extension {
  if (arg instanceof AnExtensionContext) {
    const listextensionname = buildExtensionNameTokenList(arg._p_1_3)
    return {
      type: 'AnExtension',
      listextensionname,
    }
  }
  throw new Error('[buildExtension] Error: arg should be an instance of ExtensionContext')
}

export function buildExtensionNameTokenList(arg: ListExtensionNameContext): Array<extensionNameToken> {
  if (arg instanceof ListExtensionName_EmptyContext) {
    return []
  }
  if (arg instanceof ListExtensionName_AppendLastContext) {
    const data = buildExtensionNameToken(arg._p_2_1)
    return [data]
  }
  if (arg instanceof ListExtensionName_PrependFirstContext) {
    const value1 = buildExtensionNameToken(arg._p_3_1)
    const value2 = buildExtensionNameTokenList(arg._p_3_3)
    return [value1, ...value2]
  }
  throw new Error('[buildExtensionNameTokenList] Error: arg should be an instance of ListExtensionNameContext')
}

export function buildExtensionList(arg: ListExtensionContext): Array<extension> {
  if (arg instanceof ListExtension_EmptyContext) {
    return []
  }
  if (arg instanceof ListExtension_PrependFirstContext) {
    const value1 = buildExtensionList(arg._p_2_1)
    const value2 = buildExtension(arg._p_2_2)
    return [...value1, value2]
  }
  throw new Error('[buildExtensionList] Error: arg should be an instance of ListExtensionContext')
}

export function buildDecl(arg: DeclContext): decl {
  if (arg instanceof DeclFunContext) {
    const listannotation = buildAnnotationList(arg._p_1_1)
    const stellaident = buildStellaIdentToken(arg._p_1_3)
    const listparamdecl = buildParamDeclList(arg._p_1_5)
    const returntype = buildReturnType(arg._p_1_7)
    const throwtype = buildThrowType(arg._p_1_8)
    const listdecl = buildDeclList(arg._p_1_10)
    const expr = buildExpr(arg._p_1_12)
    return {
      type: 'DeclFun',
      listannotation,
      stellaident,
      listparamdecl,
      returntype,
      throwtype,
      listdecl,
      expr,
    }
  }
  if (arg instanceof DeclFunGenericContext) {
    const listannotation = buildAnnotationList(arg._p_2_1)
    const stellaident = buildStellaIdentToken(arg._p_2_4)
    const liststellaident = buildStellaIdentTokenList(arg._p_2_6)
    const listparamdecl = buildParamDeclList(arg._p_2_9)
    const returntype = buildReturnType(arg._p_2_11)
    const throwtype = buildThrowType(arg._p_2_12)
    const listdecl = buildDeclList(arg._p_2_14)
    const expr = buildExpr(arg._p_2_16)
    return {
      type: 'DeclFunGeneric',
      listannotation,
      stellaident,
      liststellaident,
      listparamdecl,
      returntype,
      throwtype,
      listdecl,
      expr,
    }
  }
  if (arg instanceof DeclTypeAliasContext) {
    const stellaident = buildStellaIdentToken(arg._p_3_2)
    const type_ = buildType(arg._p_3_4)
    return {
      type: 'DeclTypeAlias',
      stellaident,
      type_,
    }
  }
  if (arg instanceof DeclExceptionTypeContext) {
    const type_ = buildType(arg._p_4_4)
    return {
      type: 'DeclExceptionType',
      type_,
    }
  }
  if (arg instanceof DeclExceptionVariantContext) {
    const stellaident = buildStellaIdentToken(arg._p_5_3)
    const type_ = buildType(arg._p_5_5)
    return {
      type: 'DeclExceptionVariant',
      stellaident,
      type_,
    }
  }
  throw new Error('[buildDecl] Error: arg should be an instance of DeclContext')
}

export function buildDeclList(arg: ListDeclContext): Array<decl> {
  if (arg instanceof ListDecl_EmptyContext) {
    return []
  }
  if (arg instanceof ListDecl_PrependFirstContext) {
    const value1 = buildDeclList(arg._p_2_1)
    const value2 = buildDecl(arg._p_2_2)
    return [...value1, value2]
  }
  throw new Error('[buildDeclList] Error: arg should be an instance of ListDeclContext')
}

export function buildLocalDecl(arg: LocalDeclContext): localDecl {
  if (arg instanceof ALocalDeclContext) {
    const decl = buildDecl(arg._p_1_1)
    return {
      type: 'ALocalDecl',
      decl,
    }
  }
  throw new Error('[buildLocalDecl] Error: arg should be an instance of LocalDeclContext')
}

export function buildLocalDeclList(arg: ListLocalDeclContext): Array<localDecl> {
  if (arg instanceof ListLocalDecl_EmptyContext) {
    return []
  }
  if (arg instanceof ListLocalDecl_PrependFirstContext) {
    const value1 = buildLocalDeclList(arg._p_2_1)
    const value2 = buildLocalDecl(arg._p_2_2)
    return [...value1, value2]
  }
  throw new Error('[buildLocalDeclList] Error: arg should be an instance of ListLocalDeclContext')
}

export function buildAnnotation(arg: AnnotationContext): annotation {
  if (arg instanceof InlineAnnotationContext) {
    return {
      type: 'InlineAnnotation',
    }
  }
  throw new Error('[buildAnnotation] Error: arg should be an instance of AnnotationContext')
}

export function buildAnnotationList(arg: ListAnnotationContext): Array<annotation> {
  if (arg instanceof ListAnnotation_EmptyContext) {
    return []
  }
  if (arg instanceof ListAnnotation_PrependFirstContext) {
    const value1 = buildAnnotationList(arg._p_2_1)
    const value2 = buildAnnotation(arg._p_2_2)
    return [...value1, value2]
  }
  throw new Error('[buildAnnotationList] Error: arg should be an instance of ListAnnotationContext')
}

export function buildParamDecl(arg: ParamDeclContext): paramDecl {
  if (arg instanceof AParamDeclContext) {
    const stellaident = buildStellaIdentToken(arg._p_1_1)
    const type_ = buildType(arg._p_1_3)
    return {
      type: 'AParamDecl',
      stellaident,
      type_,
    }
  }
  throw new Error('[buildParamDecl] Error: arg should be an instance of ParamDeclContext')
}

export function buildParamDeclList(arg: ListParamDeclContext): Array<paramDecl> {
  if (arg instanceof ListParamDecl_EmptyContext) {
    return []
  }
  if (arg instanceof ListParamDecl_AppendLastContext) {
    const data = buildParamDecl(arg._p_2_1)
    return [data]
  }
  if (arg instanceof ListParamDecl_PrependFirstContext) {
    const value1 = buildParamDecl(arg._p_3_1)
    const value2 = buildParamDeclList(arg._p_3_3)
    return [value1, ...value2]
  }
  throw new Error('[buildParamDeclList] Error: arg should be an instance of ListParamDeclContext')
}

export function buildReturnType(arg: ReturnTypeContext): returnType {
  if (arg instanceof NoReturnTypeContext) {
    return {
      type: 'NoReturnType',
    }
  }
  if (arg instanceof SomeReturnTypeContext) {
    const type_ = buildType(arg._p_2_2)
    return {
      type: 'SomeReturnType',
      type_,
    }
  }
  throw new Error('[buildReturnType] Error: arg should be an instance of ReturnTypeContext')
}

export function buildThrowType(arg: ThrowTypeContext): throwType {
  if (arg instanceof NoThrowTypeContext) {
    return {
      type: 'NoThrowType',
    }
  }
  if (arg instanceof SomeThrowTypeContext) {
    const listtype = buildType9List(arg._p_2_2)
    return {
      type: 'SomeThrowType',
      listtype,
    }
  }
  throw new Error('[buildThrowType] Error: arg should be an instance of ThrowTypeContext')
}

export function buildType9(arg: Type9Context): type_ {
  if (arg instanceof Coercion_Type9_1Context) {
    return buildType(arg._p_1_1)
  }
  throw new Error('[buildType9] Error: arg should be an instance of TypeContext')
}

export function buildType9List(arg: ListType9Context): Array<type_> {
  if (arg instanceof ListType9_AppendLastContext) {
    const data = buildType9(arg._p_1_1)
    return [data]
  }
  if (arg instanceof ListType9_PrependFirstContext) {
    const value1 = buildType9(arg._p_2_1)
    const value2 = buildType9List(arg._p_2_3)
    return [value1, ...value2]
  }
  throw new Error('[buildType9List] Error: arg should be an instance of ListTypeContext')
}

export function buildMatchCase(arg: MatchCaseContext): matchCase {
  if (arg instanceof AMatchCaseContext) {
    const pattern = buildPattern(arg._p_1_1)
    const expr = buildExpr(arg._p_1_3)
    return {
      type: 'AMatchCase',
      pattern,
      expr,
    }
  }
  throw new Error('[buildMatchCase] Error: arg should be an instance of MatchCaseContext')
}

export function buildMatchCaseList(arg: ListMatchCaseContext): Array<matchCase> {
  if (arg instanceof ListMatchCase_EmptyContext) {
    return []
  }
  if (arg instanceof ListMatchCase_AppendLastContext) {
    const data = buildMatchCase(arg._p_2_1)
    return [data]
  }
  if (arg instanceof ListMatchCase_PrependFirstContext) {
    const value1 = buildMatchCase(arg._p_3_1)
    const value2 = buildMatchCaseList(arg._p_3_3)
    return [value1, ...value2]
  }
  throw new Error('[buildMatchCaseList] Error: arg should be an instance of ListMatchCaseContext')
}

export function buildOptionalTyping(arg: OptionalTypingContext): optionalTyping {
  if (arg instanceof NoTypingContext) {
    return {
      type: 'NoTyping',
    }
  }
  if (arg instanceof SomeTypingContext) {
    const type_ = buildType(arg._p_2_2)
    return {
      type: 'SomeTyping',
      type_,
    }
  }
  throw new Error('[buildOptionalTyping] Error: arg should be an instance of OptionalTypingContext')
}

export function buildPatternData(arg: PatternDataContext): patternData {
  if (arg instanceof NoPatternDataContext) {
    return {
      type: 'NoPatternData',
    }
  }
  if (arg instanceof SomePatternDataContext) {
    const pattern = buildPattern(arg._p_2_2)
    return {
      type: 'SomePatternData',
      pattern,
    }
  }
  throw new Error('[buildPatternData] Error: arg should be an instance of PatternDataContext')
}

export function buildExprData(arg: ExprDataContext): exprData {
  if (arg instanceof NoExprDataContext) {
    return {
      type: 'NoExprData',
    }
  }
  if (arg instanceof SomeExprDataContext) {
    const expr = buildExpr(arg._p_2_2)
    return {
      type: 'SomeExprData',
      expr,
    }
  }
  throw new Error('[buildExprData] Error: arg should be an instance of ExprDataContext')
}

export function buildPattern(arg: PatternContext): pattern {
  if (arg instanceof PatternCastAsContext) {
    const pattern = buildPattern(arg._p_1_1)
    const type_ = buildType(arg._p_1_4)
    return {
      type: 'PatternCastAs',
      pattern,
      type_,
    }
  }
  if (arg instanceof PatternAscContext) {
    const pattern = buildPattern(arg._p_2_1)
    const type_ = buildType(arg._p_2_3)
    return {
      type: 'PatternAsc',
      pattern,
      type_,
    }
  }
  if (arg instanceof PatternVariantContext) {
    const stellaident = buildStellaIdentToken(arg._p_3_2)
    const patterndata = buildPatternData(arg._p_3_3)
    return {
      type: 'PatternVariant',
      stellaident,
      patterndata,
    }
  }
  if (arg instanceof PatternInlContext) {
    const pattern = buildPattern(arg._p_4_3)
    return {
      type: 'PatternInl',
      pattern,
    }
  }
  if (arg instanceof PatternInrContext) {
    const pattern = buildPattern(arg._p_5_3)
    return {
      type: 'PatternInr',
      pattern,
    }
  }
  if (arg instanceof PatternTupleContext) {
    const listpattern = buildPatternList(arg._p_6_2)
    return {
      type: 'PatternTuple',
      listpattern,
    }
  }
  if (arg instanceof PatternRecordContext) {
    const listlabelledpattern = buildLabelledPatternList(arg._p_7_2)
    return {
      type: 'PatternRecord',
      listlabelledpattern,
    }
  }
  if (arg instanceof PatternListContext) {
    const listpattern = buildPatternList(arg._p_8_2)
    return {
      type: 'PatternList',
      listpattern,
    }
  }
  if (arg instanceof PatternConsContext) {
    const pattern_1 = buildPattern(arg._p_9_3)
    const pattern_2 = buildPattern(arg._p_9_5)
    return {
      type: 'PatternCons',
      pattern_1,
      pattern_2,
    }
  }
  if (arg instanceof PatternFalseContext) {
    return {
      type: 'PatternFalse',
    }
  }
  if (arg instanceof PatternTrueContext) {
    return {
      type: 'PatternTrue',
    }
  }
  if (arg instanceof PatternUnitContext) {
    return {
      type: 'PatternUnit',
    }
  }
  if (arg instanceof PatternIntContext) {
    const integer = buildIntegerToken(arg._p_13_1)
    return {
      type: 'PatternInt',
      integer,
    }
  }
  if (arg instanceof PatternSuccContext) {
    const pattern = buildPattern(arg._p_14_3)
    return {
      type: 'PatternSucc',
      pattern,
    }
  }
  if (arg instanceof PatternVarContext) {
    const stellaident = buildStellaIdentToken(arg._p_15_1)
    return {
      type: 'PatternVar',
      stellaident,
    }
  }
  if (arg instanceof Coercion_Pattern_16Context) {
    return buildPattern(arg._p_16_2)
  }
  throw new Error('[buildPattern] Error: arg should be an instance of PatternContext')
}

export function buildPatternList(arg: ListPatternContext): Array<pattern> {
  if (arg instanceof ListPattern_EmptyContext) {
    return []
  }
  if (arg instanceof ListPattern_AppendLastContext) {
    const data = buildPattern(arg._p_2_1)
    return [data]
  }
  if (arg instanceof ListPattern_PrependFirstContext) {
    const value1 = buildPattern(arg._p_3_1)
    const value2 = buildPatternList(arg._p_3_3)
    return [value1, ...value2]
  }
  throw new Error('[buildPatternList] Error: arg should be an instance of ListPatternContext')
}

export function buildLabelledPattern(arg: LabelledPatternContext): labelledPattern {
  if (arg instanceof ALabelledPatternContext) {
    const stellaident = buildStellaIdentToken(arg._p_1_1)
    const pattern = buildPattern(arg._p_1_3)
    return {
      type: 'ALabelledPattern',
      stellaident,
      pattern,
    }
  }
  throw new Error('[buildLabelledPattern] Error: arg should be an instance of LabelledPatternContext')
}

export function buildLabelledPatternList(arg: ListLabelledPatternContext): Array<labelledPattern> {
  if (arg instanceof ListLabelledPattern_AppendLastContext) {
    const data = buildLabelledPattern(arg._p_1_1)
    return [data]
  }
  if (arg instanceof ListLabelledPattern_PrependFirstContext) {
    const value1 = buildLabelledPattern(arg._p_2_1)
    const value2 = buildLabelledPatternList(arg._p_2_3)
    return [value1, ...value2]
  }
  throw new Error('[buildLabelledPatternList] Error: arg should be an instance of ListLabelledPatternContext')
}

export function buildBinding(arg: BindingContext): binding {
  if (arg instanceof ABindingContext) {
    const stellaident = buildStellaIdentToken(arg._p_1_1)
    const expr = buildExpr(arg._p_1_3)
    return {
      type: 'ABinding',
      stellaident,
      expr,
    }
  }
  throw new Error('[buildBinding] Error: arg should be an instance of BindingContext')
}

export function buildBindingList(arg: ListBindingContext): Array<binding> {
  if (arg instanceof ListBinding_AppendLastContext) {
    const data = buildBinding(arg._p_1_1)
    return [data]
  }
  if (arg instanceof ListBinding_PrependFirstContext) {
    const value1 = buildBinding(arg._p_2_1)
    const value2 = buildBindingList(arg._p_2_3)
    return [value1, ...value2]
  }
  throw new Error('[buildBindingList] Error: arg should be an instance of ListBindingContext')
}

export function buildExpr(arg: ExprContext): expr {
  if (arg instanceof SequenceContext) {
    const expr_1 = buildExpr1(arg._p_1_1)
    const expr_2 = buildExpr(arg._p_1_3)
    return {
      type: 'Sequence',
      expr_1,
      expr_2,
    }
  }
  if (arg instanceof Coercion_Expr_2Context) {
    return buildExpr1(arg._p_2_1)
  }
  if (arg instanceof LetContext) {
    const listpatternbinding = buildPatternBindingList(arg._p_3_2)
    const expr = buildExpr(arg._p_3_4)
    return {
      type: 'Let',
      listpatternbinding,
      expr,
    }
  }
  if (arg instanceof LetRecContext) {
    const listpatternbinding = buildPatternBindingList(arg._p_4_2)
    const expr = buildExpr(arg._p_4_4)
    return {
      type: 'LetRec',
      listpatternbinding,
      expr,
    }
  }
  if (arg instanceof TypeAbstractionContext) {
    const liststellaident = buildStellaIdentTokenList(arg._p_5_3)
    const expr = buildExpr(arg._p_5_5)
    return {
      type: 'TypeAbstraction',
      liststellaident,
      expr,
    }
  }
  if (arg instanceof Coercion_Expr_6Context) {
    return buildExpr1(arg._p_6_1)
  }
  throw new Error('[buildExpr] Error: arg should be an instance of ExprContext')
}

export function buildExprList(arg: ListExprContext): Array<expr> {
  if (arg instanceof ListExpr_EmptyContext) {
    return []
  }
  if (arg instanceof ListExpr_AppendLastContext) {
    const data = buildExpr(arg._p_2_1)
    return [data]
  }
  if (arg instanceof ListExpr_PrependFirstContext) {
    const value1 = buildExpr(arg._p_3_1)
    const value2 = buildExprList(arg._p_3_3)
    return [value1, ...value2]
  }
  throw new Error('[buildExprList] Error: arg should be an instance of ListExprContext')
}

export function buildExpr1(arg: Expr1Context): expr {
  if (arg instanceof AssignContext) {
    const expr_1 = buildExpr2(arg._p_1_1)
    const expr_2 = buildExpr1(arg._p_1_3)
    return {
      type: 'Assign',
      expr_1,
      expr_2,
    }
  }
  if (arg instanceof IfContext) {
    const expr_1 = buildExpr1(arg._p_2_2)
    const expr_2 = buildExpr1(arg._p_2_4)
    const expr_3 = buildExpr1(arg._p_2_6)
    return {
      type: 'If',
      expr_1,
      expr_2,
      expr_3,
    }
  }
  if (arg instanceof Coercion_Expr1_3Context) {
    return buildExpr2(arg._p_3_1)
  }
  throw new Error('[buildExpr1] Error: arg should be an instance of ExprContext')
}

export function buildPatternBinding(arg: PatternBindingContext): patternBinding {
  if (arg instanceof APatternBindingContext) {
    const pattern = buildPattern(arg._p_1_1)
    const expr = buildExpr(arg._p_1_3)
    return {
      type: 'APatternBinding',
      pattern,
      expr,
    }
  }
  throw new Error('[buildPatternBinding] Error: arg should be an instance of PatternBindingContext')
}

export function buildPatternBindingList(arg: ListPatternBindingContext): Array<patternBinding> {
  if (arg instanceof ListPatternBinding_AppendLastContext) {
    const data = buildPatternBinding(arg._p_1_1)
    return [data]
  }
  if (arg instanceof ListPatternBinding_PrependFirstContext) {
    const value1 = buildPatternBinding(arg._p_2_1)
    const value2 = buildPatternBindingList(arg._p_2_3)
    return [value1, ...value2]
  }
  throw new Error('[buildPatternBindingList] Error: arg should be an instance of ListPatternBindingContext')
}

export function buildExpr2(arg: Expr2Context): expr {
  if (arg instanceof LessThanContext) {
    const expr_1 = buildExpr3(arg._p_1_1)
    const expr_2 = buildExpr3(arg._p_1_3)
    return {
      type: 'LessThan',
      expr_1,
      expr_2,
    }
  }
  if (arg instanceof LessThanOrEqualContext) {
    const expr_1 = buildExpr3(arg._p_2_1)
    const expr_2 = buildExpr3(arg._p_2_3)
    return {
      type: 'LessThanOrEqual',
      expr_1,
      expr_2,
    }
  }
  if (arg instanceof GreaterThanContext) {
    const expr_1 = buildExpr3(arg._p_3_1)
    const expr_2 = buildExpr3(arg._p_3_3)
    return {
      type: 'GreaterThan',
      expr_1,
      expr_2,
    }
  }
  if (arg instanceof GreaterThanOrEqualContext) {
    const expr_1 = buildExpr3(arg._p_4_1)
    const expr_2 = buildExpr3(arg._p_4_3)
    return {
      type: 'GreaterThanOrEqual',
      expr_1,
      expr_2,
    }
  }
  if (arg instanceof EqualContext) {
    const expr_1 = buildExpr3(arg._p_5_1)
    const expr_2 = buildExpr3(arg._p_5_3)
    return {
      type: 'Equal',
      expr_1,
      expr_2,
    }
  }
  if (arg instanceof NotEqualContext) {
    const expr_1 = buildExpr3(arg._p_6_1)
    const expr_2 = buildExpr3(arg._p_6_3)
    return {
      type: 'NotEqual',
      expr_1,
      expr_2,
    }
  }
  if (arg instanceof Coercion_Expr2_7Context) {
    return buildExpr3(arg._p_7_1)
  }
  throw new Error('[buildExpr2] Error: arg should be an instance of ExprContext')
}

export function buildExpr2List(arg: ListExpr2Context): Array<expr> {
  if (arg instanceof ListExpr2_AppendLastContext) {
    const data = buildExpr2(arg._p_1_1)
    return [data]
  }
  if (arg instanceof ListExpr2_PrependFirstContext) {
    const value1 = buildExpr2(arg._p_2_1)
    const value2 = buildExpr2List(arg._p_2_3)
    return [value1, ...value2]
  }
  throw new Error('[buildExpr2List] Error: arg should be an instance of ListExprContext')
}

export function buildExpr3(arg: Expr3Context): expr {
  if (arg instanceof TypeAscContext) {
    const expr = buildExpr3(arg._p_1_1)
    const type_ = buildType2(arg._p_1_3)
    return {
      type: 'TypeAsc',
      expr,
      type_,
    }
  }
  if (arg instanceof TypeCastContext) {
    const expr = buildExpr3(arg._p_2_1)
    const type_ = buildType2(arg._p_2_4)
    return {
      type: 'TypeCast',
      expr,
      type_,
    }
  }
  if (arg instanceof AbstractionContext) {
    const listparamdecl = buildParamDeclList(arg._p_3_3)
    const expr = buildExpr(arg._p_3_7)
    return {
      type: 'Abstraction',
      listparamdecl,
      expr,
    }
  }
  if (arg instanceof VariantContext) {
    const stellaident = buildStellaIdentToken(arg._p_4_2)
    const exprdata = buildExprData(arg._p_4_3)
    return {
      type: 'Variant',
      stellaident,
      exprdata,
    }
  }
  if (arg instanceof MatchContext) {
    const expr = buildExpr2(arg._p_5_2)
    const listmatchcase = buildMatchCaseList(arg._p_5_4)
    return {
      type: 'Match',
      expr,
      listmatchcase,
    }
  }
  if (arg instanceof ListContext) {
    const listexpr = buildExprList(arg._p_6_2)
    return {
      type: 'List',
      listexpr,
    }
  }
  if (arg instanceof AddContext) {
    const expr_1 = buildExpr3(arg._p_7_1)
    const expr_2 = buildExpr4(arg._p_7_3)
    return {
      type: 'Add',
      expr_1,
      expr_2,
    }
  }
  if (arg instanceof SubtractContext) {
    const expr_1 = buildExpr3(arg._p_8_1)
    const expr_2 = buildExpr4(arg._p_8_3)
    return {
      type: 'Subtract',
      expr_1,
      expr_2,
    }
  }
  if (arg instanceof LogicOrContext) {
    const expr_1 = buildExpr3(arg._p_9_1)
    const expr_2 = buildExpr4(arg._p_9_3)
    return {
      type: 'LogicOr',
      expr_1,
      expr_2,
    }
  }
  if (arg instanceof Coercion_Expr3_10Context) {
    return buildExpr4(arg._p_10_1)
  }
  throw new Error('[buildExpr3] Error: arg should be an instance of ExprContext')
}

export function buildExpr4(arg: Expr4Context): expr {
  if (arg instanceof MultiplyContext) {
    const expr_1 = buildExpr4(arg._p_1_1)
    const expr_2 = buildExpr5(arg._p_1_3)
    return {
      type: 'Multiply',
      expr_1,
      expr_2,
    }
  }
  if (arg instanceof DivideContext) {
    const expr_1 = buildExpr4(arg._p_2_1)
    const expr_2 = buildExpr5(arg._p_2_3)
    return {
      type: 'Divide',
      expr_1,
      expr_2,
    }
  }
  if (arg instanceof LogicAndContext) {
    const expr_1 = buildExpr4(arg._p_3_1)
    const expr_2 = buildExpr5(arg._p_3_3)
    return {
      type: 'LogicAnd',
      expr_1,
      expr_2,
    }
  }
  if (arg instanceof Coercion_Expr4_4Context) {
    return buildExpr5(arg._p_4_1)
  }
  throw new Error('[buildExpr4] Error: arg should be an instance of ExprContext')
}

export function buildExpr5(arg: Expr5Context): expr {
  if (arg instanceof RefContext) {
    const expr = buildExpr(arg._p_1_3)
    return {
      type: 'Ref',
      expr,
    }
  }
  if (arg instanceof DerefContext) {
    const expr = buildExpr5(arg._p_2_2)
    return {
      type: 'Deref',
      expr,
    }
  }
  if (arg instanceof Coercion_Expr5_3Context) {
    return buildExpr6(arg._p_3_1)
  }
  throw new Error('[buildExpr5] Error: arg should be an instance of ExprContext')
}

export function buildExpr6(arg: Expr6Context): expr {
  if (arg instanceof ApplicationContext) {
    const expr = buildExpr6(arg._p_1_1)
    const listexpr = buildExprList(arg._p_1_3)
    return {
      type: 'Application',
      expr,
      listexpr,
    }
  }
  if (arg instanceof TypeApplicationContext) {
    const expr = buildExpr6(arg._p_2_1)
    const listtype = buildTypeList(arg._p_2_3)
    return {
      type: 'TypeApplication',
      expr,
      listtype,
    }
  }
  if (arg instanceof DotRecordContext) {
    const expr = buildExpr6(arg._p_3_1)
    const stellaident = buildStellaIdentToken(arg._p_3_3)
    return {
      type: 'DotRecord',
      expr,
      stellaident,
    }
  }
  if (arg instanceof DotTupleContext) {
    const expr = buildExpr6(arg._p_4_1)
    const integer = buildIntegerToken(arg._p_4_3)
    return {
      type: 'DotTuple',
      expr,
      integer,
    }
  }
  if (arg instanceof TupleContext) {
    const listexpr = buildExprList(arg._p_5_2)
    return {
      type: 'Tuple',
      listexpr,
    }
  }
  if (arg instanceof RecordContext) {
    const listbinding = buildBindingList(arg._p_6_2)
    return {
      type: 'Record',
      listbinding,
    }
  }
  if (arg instanceof ConsListContext) {
    const expr_1 = buildExpr(arg._p_7_3)
    const expr_2 = buildExpr(arg._p_7_5)
    return {
      type: 'ConsList',
      expr_1,
      expr_2,
    }
  }
  if (arg instanceof HeadContext) {
    const expr = buildExpr(arg._p_8_3)
    return {
      type: 'Head',
      expr,
    }
  }
  if (arg instanceof IsEmptyContext) {
    const expr = buildExpr(arg._p_9_3)
    return {
      type: 'IsEmpty',
      expr,
    }
  }
  if (arg instanceof TailContext) {
    const expr = buildExpr(arg._p_10_3)
    return {
      type: 'Tail',
      expr,
    }
  }
  if (arg instanceof PanicContext) {
    return {
      type: 'Panic',
    }
  }
  if (arg instanceof ThrowContext) {
    const expr = buildExpr(arg._p_12_3)
    return {
      type: 'Throw',
      expr,
    }
  }
  if (arg instanceof TryCatchContext) {
    const expr_1 = buildExpr(arg._p_13_3)
    const pattern = buildPattern(arg._p_13_7)
    const expr_2 = buildExpr(arg._p_13_9)
    return {
      type: 'TryCatch',
      expr_1,
      pattern,
      expr_2,
    }
  }
  if (arg instanceof TryWithContext) {
    const expr_1 = buildExpr(arg._p_14_3)
    const expr_2 = buildExpr(arg._p_14_7)
    return {
      type: 'TryWith',
      expr_1,
      expr_2,
    }
  }
  if (arg instanceof TryCastAsContext) {
    const expr_1 = buildExpr(arg._p_15_3)
    const type_ = buildType(arg._p_15_7)
    const pattern = buildPattern(arg._p_15_9)
    const expr_2 = buildExpr(arg._p_15_11)
    const expr_3 = buildExpr(arg._p_15_15)
    return {
      type: 'TryCastAs',
      expr_1,
      type_,
      pattern,
      expr_2,
      expr_3,
    }
  }
  if (arg instanceof InlContext) {
    const expr = buildExpr(arg._p_16_3)
    return {
      type: 'Inl',
      expr,
    }
  }
  if (arg instanceof InrContext) {
    const expr = buildExpr(arg._p_17_3)
    return {
      type: 'Inr',
      expr,
    }
  }
  if (arg instanceof SuccContext) {
    const expr = buildExpr(arg._p_18_3)
    return {
      type: 'Succ',
      expr,
    }
  }
  if (arg instanceof LogicNotContext) {
    const expr = buildExpr(arg._p_19_3)
    return {
      type: 'LogicNot',
      expr,
    }
  }
  if (arg instanceof PredContext) {
    const expr = buildExpr(arg._p_20_3)
    return {
      type: 'Pred',
      expr,
    }
  }
  if (arg instanceof IsZeroContext) {
    const expr = buildExpr(arg._p_21_3)
    return {
      type: 'IsZero',
      expr,
    }
  }
  if (arg instanceof FixContext) {
    const expr = buildExpr(arg._p_22_3)
    return {
      type: 'Fix',
      expr,
    }
  }
  if (arg instanceof NatRecContext) {
    const expr_1 = buildExpr(arg._p_23_3)
    const expr_2 = buildExpr(arg._p_23_5)
    const expr_3 = buildExpr(arg._p_23_7)
    return {
      type: 'NatRec',
      expr_1,
      expr_2,
      expr_3,
    }
  }
  if (arg instanceof FoldContext) {
    const type_ = buildType(arg._p_24_3)
    const expr = buildExpr7(arg._p_24_5)
    return {
      type: 'Fold',
      type_,
      expr,
    }
  }
  if (arg instanceof UnfoldContext) {
    const type_ = buildType(arg._p_25_3)
    const expr = buildExpr7(arg._p_25_5)
    return {
      type: 'Unfold',
      type_,
      expr,
    }
  }
  if (arg instanceof Coercion_Expr6_26Context) {
    return buildExpr7(arg._p_26_1)
  }
  throw new Error('[buildExpr6] Error: arg should be an instance of ExprContext')
}

export function buildExpr7(arg: Expr7Context): expr {
  if (arg instanceof ConstTrueContext) {
    return {
      type: 'ConstTrue',
    }
  }
  if (arg instanceof ConstFalseContext) {
    return {
      type: 'ConstFalse',
    }
  }
  if (arg instanceof ConstUnitContext) {
    return {
      type: 'ConstUnit',
    }
  }
  if (arg instanceof ConstIntContext) {
    const integer = buildIntegerToken(arg._p_4_1)
    return {
      type: 'ConstInt',
      integer,
    }
  }
  if (arg instanceof ConstMemoryContext) {
    const memoryaddress = buildMemoryAddressToken(arg._p_5_1)
    return {
      type: 'ConstMemory',
      memoryaddress,
    }
  }
  if (arg instanceof VarContext) {
    const stellaident = buildStellaIdentToken(arg._p_6_1)
    return {
      type: 'Var',
      stellaident,
    }
  }
  if (arg instanceof Coercion_Expr7_7Context) {
    return buildExpr(arg._p_7_2)
  }
  throw new Error('[buildExpr7] Error: arg should be an instance of ExprContext')
}

export function buildType(arg: TypeContext): type_ {
  if (arg instanceof TypeAutoContext) {
    return {
      type: 'TypeAuto',
    }
  }
  if (arg instanceof TypeFunContext) {
    const listtype = buildTypeList(arg._p_2_3)
    const type_ = buildType(arg._p_2_6)
    return {
      type: 'TypeFun',
      listtype,
      type_,
    }
  }
  if (arg instanceof TypeForAllContext) {
    const liststellaident = buildStellaIdentTokenList(arg._p_3_2)
    const type_ = buildType(arg._p_3_4)
    return {
      type: 'TypeForAll',
      liststellaident,
      type_,
    }
  }
  if (arg instanceof TypeRecContext) {
    const stellaident = buildStellaIdentToken(arg._p_4_2)
    const type_ = buildType(arg._p_4_4)
    return {
      type: 'TypeRec',
      stellaident,
      type_,
    }
  }
  if (arg instanceof Coercion_Type_5Context) {
    return buildType1(arg._p_5_1)
  }
  throw new Error('[buildType] Error: arg should be an instance of TypeContext')
}

export function buildType1(arg: Type1Context): type_ {
  if (arg instanceof TypeSumContext) {
    const type_1 = buildType2(arg._p_1_1)
    const type_2 = buildType2(arg._p_1_3)
    return {
      type: 'TypeSum',
      type_1,
      type_2,
    }
  }
  if (arg instanceof Coercion_Type1_2Context) {
    return buildType2(arg._p_2_1)
  }
  throw new Error('[buildType1] Error: arg should be an instance of TypeContext')
}

export function buildType2(arg: Type2Context): type_ {
  if (arg instanceof TypeTupleContext) {
    const listtype = buildTypeList(arg._p_1_2)
    return {
      type: 'TypeTuple',
      listtype,
    }
  }
  if (arg instanceof TypeRecordContext) {
    const listrecordfieldtype = buildRecordFieldTypeList(arg._p_2_2)
    return {
      type: 'TypeRecord',
      listrecordfieldtype,
    }
  }
  if (arg instanceof TypeVariantContext) {
    const listvariantfieldtype = buildVariantFieldTypeList(arg._p_3_2)
    return {
      type: 'TypeVariant',
      listvariantfieldtype,
    }
  }
  if (arg instanceof TypeListContext) {
    const type_ = buildType(arg._p_4_2)
    return {
      type: 'TypeList',
      type_,
    }
  }
  if (arg instanceof Coercion_Type2_5Context) {
    return buildType3(arg._p_5_1)
  }
  throw new Error('[buildType2] Error: arg should be an instance of TypeContext')
}

export function buildType3(arg: Type3Context): type_ {
  if (arg instanceof TypeBoolContext) {
    return {
      type: 'TypeBool',
    }
  }
  if (arg instanceof TypeNatContext) {
    return {
      type: 'TypeNat',
    }
  }
  if (arg instanceof TypeUnitContext) {
    return {
      type: 'TypeUnit',
    }
  }
  if (arg instanceof TypeTopContext) {
    return {
      type: 'TypeTop',
    }
  }
  if (arg instanceof TypeBottomContext) {
    return {
      type: 'TypeBottom',
    }
  }
  if (arg instanceof TypeRefContext) {
    const type_ = buildType2(arg._p_6_2)
    return {
      type: 'TypeRef',
      type_,
    }
  }
  if (arg instanceof TypeVarContext) {
    const stellaident = buildStellaIdentToken(arg._p_7_1)
    return {
      type: 'TypeVar',
      stellaident,
    }
  }
  if (arg instanceof Coercion_Type3_8Context) {
    return buildType(arg._p_8_2)
  }
  throw new Error('[buildType3] Error: arg should be an instance of TypeContext')
}

export function buildTypeList(arg: ListTypeContext): Array<type_> {
  if (arg instanceof ListType_EmptyContext) {
    return []
  }
  if (arg instanceof ListType_AppendLastContext) {
    const data = buildType(arg._p_2_1)
    return [data]
  }
  if (arg instanceof ListType_PrependFirstContext) {
    const value1 = buildType(arg._p_3_1)
    const value2 = buildTypeList(arg._p_3_3)
    return [value1, ...value2]
  }
  throw new Error('[buildTypeList] Error: arg should be an instance of ListTypeContext')
}

export function buildVariantFieldType(arg: VariantFieldTypeContext): variantFieldType {
  if (arg instanceof AVariantFieldTypeContext) {
    const stellaident = buildStellaIdentToken(arg._p_1_1)
    const optionaltyping = buildOptionalTyping(arg._p_1_2)
    return {
      type: 'AVariantFieldType',
      stellaident,
      optionaltyping,
    }
  }
  throw new Error('[buildVariantFieldType] Error: arg should be an instance of VariantFieldTypeContext')
}

export function buildVariantFieldTypeList(arg: ListVariantFieldTypeContext): Array<variantFieldType> {
  if (arg instanceof ListVariantFieldType_EmptyContext) {
    return []
  }
  if (arg instanceof ListVariantFieldType_AppendLastContext) {
    const data = buildVariantFieldType(arg._p_2_1)
    return [data]
  }
  if (arg instanceof ListVariantFieldType_PrependFirstContext) {
    const value1 = buildVariantFieldType(arg._p_3_1)
    const value2 = buildVariantFieldTypeList(arg._p_3_3)
    return [value1, ...value2]
  }
  throw new Error('[buildVariantFieldTypeList] Error: arg should be an instance of ListVariantFieldTypeContext')
}

export function buildRecordFieldType(arg: RecordFieldTypeContext): recordFieldType {
  if (arg instanceof ARecordFieldTypeContext) {
    const stellaident = buildStellaIdentToken(arg._p_1_1)
    const type_ = buildType(arg._p_1_3)
    return {
      type: 'ARecordFieldType',
      stellaident,
      type_,
    }
  }
  throw new Error('[buildRecordFieldType] Error: arg should be an instance of RecordFieldTypeContext')
}

export function buildRecordFieldTypeList(arg: ListRecordFieldTypeContext): Array<recordFieldType> {
  if (arg instanceof ListRecordFieldType_AppendLastContext) {
    const data = buildRecordFieldType(arg._p_1_1)
    return [data]
  }
  if (arg instanceof ListRecordFieldType_PrependFirstContext) {
    const value1 = buildRecordFieldType(arg._p_2_1)
    const value2 = buildRecordFieldTypeList(arg._p_2_3)
    return [value1, ...value2]
  }
  throw new Error('[buildRecordFieldTypeList] Error: arg should be an instance of ListRecordFieldTypeContext')
}

export function buildTyping(arg: TypingContext): typing {
  if (arg instanceof ATypingContext) {
    const expr = buildExpr(arg._p_1_1)
    const type_ = buildType(arg._p_1_3)
    return {
      type: 'ATyping',
      expr,
      type_,
    }
  }
  throw new Error('[buildTyping] Error: arg should be an instance of TypingContext')
}
